"use strict";
/**
 * Constants File. Defines project-wide constants.
 * @version 0.1.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
var Constants;
(function (Constants) {
    /// ---
    /// App
    Constants.Account = '';
    Constants.Region = 'us-west-1';
    Constants.AppName = 'DevHour';
    /// ------
    /// Stages
    let Stages;
    (function (Stages) {
        /// -----
        /// Alpha
        let Alpha;
        (function (Alpha) {
            Alpha.Name = 'Alpha';
            Alpha.Id = `${Alpha.Name}Stage`;
        })(Alpha = Stages.Alpha || (Stages.Alpha = {}));
    })(Stages = Constants.Stages || (Constants.Stages = {}));
    /// ---
    /// EC2
    let EC2;
    (function (EC2) {
        /// ---
        /// VPC
        let VPC;
        (function (VPC) {
            VPC.Id = `${Constants.AppName}VPC`;
            VPC.CIDR = `10.0.0.0/16`;
            VPC.MaxAZs = 2;
            VPC.NATGateways = 0;
            VPC.SubnetCIDRMask = 24;
            VPC.VPCSubnetType = aws_ec2_1.SubnetType.PRIVATE_ISOLATED;
            VPC.EnableDNSHostNames = true;
            VPC.EnabltDNSSupport = true;
        })(VPC = EC2.VPC || (EC2.VPC = {}));
    })(EC2 = Constants.EC2 || (Constants.EC2 = {}));
    /// -------------
    /// Code Pipeline
    let CodePipeline;
    (function (CodePipeline) {
        CodePipeline.Id = `${Constants.AppName}Pipeline`;
        CodePipeline.StackId = `${CodePipeline.Id}Stack`;
        CodePipeline.SelfMutate = true;
        /// ---------
        /// ShellStep
        let ShellStep;
        (function (ShellStep) {
            ShellStep.Id = `${Constants.AppName}ShellStep`;
        })(ShellStep = CodePipeline.ShellStep || (CodePipeline.ShellStep = {}));
    })(CodePipeline = Constants.CodePipeline || (Constants.CodePipeline = {}));
    let DynamoDB;
    (function (DynamoDB) {
        let User;
        (function (User) {
            User.AllowActions = [];
        })(User = DynamoDB.User || (DynamoDB.User = {}));
        DynamoDB.AllowActions = [''];
    })(DynamoDB = Constants.DynamoDB || (Constants.DynamoDB = {}));
})(Constants = exports.Constants || (exports.Constants = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILGlEQUFnRDtBQUVoRCxJQUFjLFNBQVMsQ0FnRnRCO0FBaEZELFdBQWMsU0FBUztJQUVuQixPQUFPO0lBQ1AsT0FBTztJQUVNLGlCQUFPLEdBQUcsRUFBRSxDQUFHO0lBQ2YsZ0JBQU0sR0FBSSxXQUFXLENBQUc7SUFDeEIsaUJBQU8sR0FBRyxTQUFTLENBQUs7SUFFckMsVUFBVTtJQUNWLFVBQVU7SUFFVixJQUFjLE1BQU0sQ0FZbkI7SUFaRCxXQUFjLE1BQU07UUFFaEIsU0FBUztRQUNULFNBQVM7UUFFVCxJQUFjLEtBQUssQ0FLbEI7UUFMRCxXQUFjLEtBQUs7WUFFRixVQUFJLEdBQUcsT0FBTyxDQUFTO1lBQ3ZCLFFBQUUsR0FBSyxHQUFHLE1BQUEsSUFBSSxPQUFPLENBQUU7UUFFeEMsQ0FBQyxFQUxhLEtBQUssR0FBTCxZQUFLLEtBQUwsWUFBSyxRQUtsQjtJQUVMLENBQUMsRUFaYSxNQUFNLEdBQU4sZ0JBQU0sS0FBTixnQkFBTSxRQVluQjtJQUVELE9BQU87SUFDUCxPQUFPO0lBRVAsSUFBYyxHQUFHLENBaUJoQjtJQWpCRCxXQUFjLEdBQUc7UUFFYixPQUFPO1FBQ1AsT0FBTztRQUVQLElBQWMsR0FBRyxDQVVoQjtRQVZELFdBQWMsR0FBRztZQUVBLE1BQUUsR0FBbUIsR0FBRyxVQUFBLE9BQU8sS0FBSyxDQUFjO1lBQ2xELFFBQUksR0FBaUIsYUFBYSxDQUFnQjtZQUNsRCxVQUFNLEdBQWUsQ0FBQyxDQUE0QjtZQUNsRCxlQUFXLEdBQVUsQ0FBQyxDQUE0QjtZQUNsRCxrQkFBYyxHQUFPLEVBQUUsQ0FBMkI7WUFDbEQsaUJBQWEsR0FBUSxvQkFBVSxDQUFDLGdCQUFnQixDQUFFO1lBQ2xELHNCQUFrQixHQUFHLElBQUksQ0FBeUI7WUFDbEQsb0JBQWdCLEdBQUssSUFBSSxDQUF5QjtRQUNuRSxDQUFDLEVBVmEsR0FBRyxHQUFILE9BQUcsS0FBSCxPQUFHLFFBVWhCO0lBRUwsQ0FBQyxFQWpCYSxHQUFHLEdBQUgsYUFBRyxLQUFILGFBQUcsUUFpQmhCO0lBRUQsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUVqQixJQUFjLFlBQVksQ0FlekI7SUFmRCxXQUFjLFlBQVk7UUFFVCxlQUFFLEdBQVcsR0FBRyxVQUFBLE9BQU8sVUFBVSxDQUFFO1FBQ25DLG9CQUFPLEdBQU0sR0FBRyxhQUFBLEVBQUUsT0FBTyxDQUFVO1FBQ25DLHVCQUFVLEdBQUcsSUFBSSxDQUFrQjtRQUVoRCxhQUFhO1FBQ2IsYUFBYTtRQUViLElBQWMsU0FBUyxDQUl0QjtRQUpELFdBQWMsU0FBUztZQUVOLFlBQUUsR0FBRyxHQUFHLFVBQUEsT0FBTyxXQUFXLENBQUs7UUFFaEQsQ0FBQyxFQUphLFNBQVMsR0FBVCxzQkFBUyxLQUFULHNCQUFTLFFBSXRCO0lBRUwsQ0FBQyxFQWZhLFlBQVksR0FBWixzQkFBWSxLQUFaLHNCQUFZLFFBZXpCO0lBRUQsSUFBYyxRQUFRLENBVXJCO0lBVkQsV0FBYyxRQUFRO1FBRXpCLElBQWMsSUFBSSxDQUlWO1FBSlIsV0FBYyxJQUFJO1lBRU0saUJBQVksR0FBRyxFQUFFLENBQUM7UUFFbkMsQ0FBQyxFQUpNLElBQUksR0FBSixhQUFJLEtBQUosYUFBSSxRQUlWO1FBRUsscUJBQVksR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFNO0lBRW5DLENBQUMsRUFWYSxRQUFRLEdBQVIsa0JBQVEsS0FBUixrQkFBUSxRQVVyQjtBQUVMLENBQUMsRUFoRmEsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFnRnRCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb25zdGFudHMgRmlsZS4gRGVmaW5lcyBwcm9qZWN0LXdpZGUgY29uc3RhbnRzLlxuICogQHZlcnNpb24gMC4xLjBcbiAqL1xuXG5pbXBvcnQgeyBTdWJuZXRUeXBlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWVjMidcblxuZXhwb3J0IG1vZHVsZSBDb25zdGFudHMge1xuXG4gICAgLy8vIC0tLVxuICAgIC8vLyBBcHBcbiAgICBcbiAgICBleHBvcnQgY29uc3QgQWNjb3VudCA9ICcnXHRcdDtcbiAgICBleHBvcnQgY29uc3QgUmVnaW9uICA9ICd1cy13ZXN0LTEnICA7XG4gICAgZXhwb3J0IGNvbnN0IEFwcE5hbWUgPSAnRGV2SG91cicgICAgO1xuXG4gICAgLy8vIC0tLS0tLVxuICAgIC8vLyBTdGFnZXNcblxuICAgIGV4cG9ydCBtb2R1bGUgU3RhZ2VzIHtcblxuICAgICAgICAvLy8gLS0tLS1cbiAgICAgICAgLy8vIEFscGhhXG5cbiAgICAgICAgZXhwb3J0IG1vZHVsZSBBbHBoYSB7XG5cbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBOYW1lID0gJ0FscGhhJyAgICAgICAgO1xuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IElkICAgPSBgJHtOYW1lfVN0YWdlYCA7ICAgICAgICAgICAgXG5cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8vIC0tLVxuICAgIC8vLyBFQzJcblxuICAgIGV4cG9ydCBtb2R1bGUgRUMyIHtcblxuICAgICAgICAvLy8gLS0tXG4gICAgICAgIC8vLyBWUENcblxuICAgICAgICBleHBvcnQgbW9kdWxlIFZQQyB7XG5cbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBJZCAgICAgICAgICAgICAgICAgPSBgJHtBcHBOYW1lfVZQQ2AgICAgICAgICAgICAgO1xuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IENJRFIgICAgICAgICAgICAgICA9IGAxMC4wLjAuMC8xNmAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICBleHBvcnQgY29uc3QgTWF4QVpzICAgICAgICAgICAgID0gMiAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBOQVRHYXRld2F5cyAgICAgICAgPSAwICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IFN1Ym5ldENJRFJNYXNrICAgICA9IDI0ICAgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICBleHBvcnQgY29uc3QgVlBDU3VibmV0VHlwZSAgICAgID0gU3VibmV0VHlwZS5QUklWQVRFX0lTT0xBVEVEIDtcbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBFbmFibGVETlNIb3N0TmFtZXMgPSB0cnVlICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IEVuYWJsdEROU1N1cHBvcnQgICA9IHRydWUgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8vLyAtLS0tLS0tLS0tLS0tXG4gICAgLy8vIENvZGUgUGlwZWxpbmVcblxuICAgIGV4cG9ydCBtb2R1bGUgQ29kZVBpcGVsaW5lIHtcblxuICAgICAgICBleHBvcnQgY29uc3QgSWQgICAgICAgICA9IGAke0FwcE5hbWV9UGlwZWxpbmVgIDtcbiAgICAgICAgZXhwb3J0IGNvbnN0IFN0YWNrSWQgICAgPSBgJHtJZH1TdGFja2AgICAgICAgICA7XG4gICAgICAgIGV4cG9ydCBjb25zdCBTZWxmTXV0YXRlID0gdHJ1ZSAgICAgICAgICAgICAgICAgO1xuXG4gICAgICAgIC8vLyAtLS0tLS0tLS1cbiAgICAgICAgLy8vIFNoZWxsU3RlcFxuXG4gICAgICAgIGV4cG9ydCBtb2R1bGUgU2hlbGxTdGVwIHtcblxuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IElkID0gYCR7QXBwTmFtZX1TaGVsbFN0ZXBgICAgIDtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBleHBvcnQgbW9kdWxlIER5bmFtb0RCIHtcblxuXHRleHBvcnQgbW9kdWxlIFVzZXIge1xuXG4gICAgICAgICAgICBleHBvcnQgY29uc3QgQWxsb3dBY3Rpb25zID0gW107XG5cbiAgICAgICAgfVxuXG5cdGV4cG9ydCBjb25zdCBBbGxvd0FjdGlvbnMgPSBbJyddICAgICA7XHRcblxuICAgIH1cblxufVxuIl19