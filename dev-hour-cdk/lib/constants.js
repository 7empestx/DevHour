"use strict";
/**
 * Constants
 * @version 0.9.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
var Constants;
(function (Constants) {
    /// ---
    /// App
    Constants.Account = '';
    Constants.Region = 'us-west-1';
    Constants.AppName = 'DevHour';
    /// ------
    /// Stages
    let Stages;
    (function (Stages) {
        /// -----
        /// Alpha
        let Alpha;
        (function (Alpha) {
            Alpha.Name = 'Alpha';
            Alpha.Id = `${Alpha.Name}Stage`;
        })(Alpha = Stages.Alpha || (Stages.Alpha = {}));
    })(Stages = Constants.Stages || (Constants.Stages = {}));
    /// ---
    /// EC2
    let EC2;
    (function (EC2) {
        /// ---
        /// VPC
        let VPC;
        (function (VPC) {
            VPC.Id = `${Constants.AppName}VPC`;
            VPC.StackId = `${VPC.Id}Stack`;
            VPC.CIDR = '10.0.0.0/16';
            VPC.MaxAZs = 2;
            VPC.NATGateways = 0;
            VPC.EnableDNSHostNames = true;
            VPC.EnableDNSSupport = true;
            /// --------------------
            /// Subnet Configuration
            let SubnetConfiguration;
            (function (SubnetConfiguration) {
                SubnetConfiguration.SubnetName = `${Constants.EC2.VPC.Id}Subnet`;
                SubnetConfiguration.SubnetCIDRMask = 24;
                SubnetConfiguration.Type = aws_ec2_1.SubnetType.PRIVATE_ISOLATED;
            })(SubnetConfiguration = VPC.SubnetConfiguration || (VPC.SubnetConfiguration = {}));
        })(VPC = EC2.VPC || (EC2.VPC = {}));
    })(EC2 = Constants.EC2 || (Constants.EC2 = {}));
    /// -------------
    /// Code Pipeline
    let CodePipeline;
    (function (CodePipeline) {
        CodePipeline.Id = `${Constants.AppName}Pipeline`;
        CodePipeline.StackId = `${CodePipeline.Id}Stack`;
        CodePipeline.SelfMutate = true;
        /// ---------
        /// ShellStep
        let ShellStep;
        (function (ShellStep) {
            ShellStep.Id = `${Constants.AppName}ShellStep`;
        })(ShellStep = CodePipeline.ShellStep || (CodePipeline.ShellStep = {}));
    })(CodePipeline = Constants.CodePipeline || (Constants.CodePipeline = {}));
    /// --------
    /// Cognito
    let Cognito;
    (function (Cognito) {
        Cognito.Id = `${Constants.AppName}Cognito`;
        Cognito.StackId = `${Cognito.Id}Stack`;
        Cognito.ServiceName = 'cognito-identity.amazonaws.com';
        Cognito.AuthenticatedRoleId = `${Cognito.Id}AuthenticatedRole`;
        Cognito.UnauthenticatedRoleId = `${Cognito.Id}UnauthenticatedRole`;
        Cognito.IdentityProviderId = `${Cognito.Id}IdentityProvider`;
        Cognito.IdentityProviderSecretArn = "arn:aws:secretsmanager:<region>:<account-id-number>:secret:<secret-name>-<random-6-characters>";
        /// ---------
        /// Federated
        let Federated;
        (function (Federated) {
            Federated.AuthenticatedAssumeRoleAction = 'sts:AssumeRoleWithWebIdentity';
        })(Federated = Cognito.Federated || (Cognito.Federated = {}));
        /// -------------
        /// Identity Pool
        let IdentityPool;
        (function (IdentityPool) {
            IdentityPool.Id = `${Constants.AppName}IdentityPool`;
            IdentityPool.StackId = `${IdentityPool.Id}Stack`;
            IdentityPool.AllowUnauthenticatedIdentities = false;
        })(IdentityPool = Cognito.IdentityPool || (Cognito.IdentityPool = {}));
        /// ---------
        /// User Pool
        let UserPool;
        (function (UserPool) {
            UserPool.Id = `${Constants.AppName}UserPool`;
            UserPool.StackId = `${UserPool.Id}Stack`;
            UserPool.ClientId = `${UserPool.Id}Client`;
            UserPool.SelfSignUpEnabled = true;
            /// ---------------
            /// Sign In Aliases
            let SignInAliases;
            (function (SignInAliases) {
                SignInAliases.EnableUserName = true;
                SignInAliases.EnableEmail = true;
            })(SignInAliases = UserPool.SignInAliases || (UserPool.SignInAliases = {}));
            /// -------------------
            /// Standard Attributes
            let StandardAttributes;
            (function (StandardAttributes) {
                /// ---------
                /// Full Name
                let FullName;
                (function (FullName) {
                    FullName.Required = true;
                    FullName.Mutable = false;
                })(FullName = StandardAttributes.FullName || (StandardAttributes.FullName = {}));
            })(StandardAttributes = UserPool.StandardAttributes || (UserPool.StandardAttributes = {}));
            /// ---------------
            /// Password Policy
            let PasswordPolicy;
            (function (PasswordPolicy) {
                PasswordPolicy.MinimumLength = 8;
            })(PasswordPolicy = UserPool.PasswordPolicy || (UserPool.PasswordPolicy = {}));
        })(UserPool = Cognito.UserPool || (Cognito.UserPool = {}));
    })(Cognito = Constants.Cognito || (Constants.Cognito = {}));
    /// --------
    /// DynamoDB
    let DynamoDB;
    (function (DynamoDB) {
        DynamoDB.Id = `${Constants.AppName}DynamoDB`;
        DynamoDB.StackId = `${DynamoDB.Id}Stack`;
        /// -----------------
        /// Policy Statements
        let PolicyStatements;
        (function (PolicyStatements) {
            /// ----------
            /// Basic Read
            let BasicRead;
            (function (BasicRead) {
                BasicRead.AllowActions = [];
            })(BasicRead = PolicyStatements.BasicRead || (PolicyStatements.BasicRead = {}));
        })(PolicyStatements = DynamoDB.PolicyStatements || (DynamoDB.PolicyStatements = {}));
    })(DynamoDB = Constants.DynamoDB || (Constants.DynamoDB = {}));
})(Constants = exports.Constants || (exports.Constants = {}));
//# sourceMappingURL=data:application/json;base64,