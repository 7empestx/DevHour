"use strict";
/**
 * Constants File. Defines project-wide constants.
 * @version 0.1.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Constants = void 0;
const aws_ec2_1 = require("@aws-cdk/aws-ec2");
var Constants;
(function (Constants) {
    /// ---
    /// App
    Constants.Account = '';
    Constants.Region = 'us-west-1';
    Constants.AppName = 'DevHour';
    /// ------
    /// Stages
    let Stages;
    (function (Stages) {
        /// -----
        /// Alpha
        let Alpha;
        (function (Alpha) {
            Alpha.Name = 'Alpha';
            Alpha.Id = `${Alpha.Name}Stage`;
        })(Alpha = Stages.Alpha || (Stages.Alpha = {}));
    })(Stages = Constants.Stages || (Constants.Stages = {}));
    /// ---
    /// EC2
    let EC2;
    (function (EC2) {
        /// ---
        /// VPC
        let VPC;
        (function (VPC) {
            VPC.Id = `${Constants.AppName}VPC`;
            VPC.CIDR = `10.0.0.0/16`;
            VPC.MaxAZs = 2;
            VPC.NATGateways = 0;
            VPC.SubnetCIDRMask = 24;
            VPC.VPCSubnetType = aws_ec2_1.SubnetType.PRIVATE_ISOLATED;
            VPC.EnableDNSHostNames = true;
            VPC.EnabltDNSSupport = true;
        })(VPC = EC2.VPC || (EC2.VPC = {}));
    })(EC2 = Constants.EC2 || (Constants.EC2 = {}));
    /// -------------
    /// Code Pipeline
    let CodePipeline;
    (function (CodePipeline) {
        CodePipeline.Id = `${Constants.AppName}Pipeline`;
        CodePipeline.StackId = `${CodePipeline.Id}Stack`;
        CodePipeline.SelfMutate = true;
        /// ---------
        /// ShellStep
        let ShellStep;
        (function (ShellStep) {
            ShellStep.Id = `${Constants.AppName}ShellStep`;
        })(ShellStep = CodePipeline.ShellStep || (CodePipeline.ShellStep = {}));
    })(CodePipeline = Constants.CodePipeline || (Constants.CodePipeline = {}));
})(Constants = exports.Constants || (exports.Constants = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RhbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUVILDhDQUE2QztBQUU3QyxJQUFjLFNBQVMsQ0FvRXRCO0FBcEVELFdBQWMsU0FBUztJQUVuQixPQUFPO0lBQ1AsT0FBTztJQUVNLGlCQUFPLEdBQUcsRUFBRSxDQUFHO0lBQ2YsZ0JBQU0sR0FBSSxXQUFXLENBQUc7SUFDeEIsaUJBQU8sR0FBRyxTQUFTLENBQUs7SUFFckMsVUFBVTtJQUNWLFVBQVU7SUFFVixJQUFjLE1BQU0sQ0FZbkI7SUFaRCxXQUFjLE1BQU07UUFFaEIsU0FBUztRQUNULFNBQVM7UUFFVCxJQUFjLEtBQUssQ0FLbEI7UUFMRCxXQUFjLEtBQUs7WUFFRixVQUFJLEdBQUcsT0FBTyxDQUFTO1lBQ3ZCLFFBQUUsR0FBSyxHQUFHLE1BQUEsSUFBSSxPQUFPLENBQUU7UUFFeEMsQ0FBQyxFQUxhLEtBQUssR0FBTCxZQUFLLEtBQUwsWUFBSyxRQUtsQjtJQUVMLENBQUMsRUFaYSxNQUFNLEdBQU4sZ0JBQU0sS0FBTixnQkFBTSxRQVluQjtJQUVELE9BQU87SUFDUCxPQUFPO0lBRVAsSUFBYyxHQUFHLENBaUJoQjtJQWpCRCxXQUFjLEdBQUc7UUFFYixPQUFPO1FBQ1AsT0FBTztRQUVQLElBQWMsR0FBRyxDQVVoQjtRQVZELFdBQWMsR0FBRztZQUVBLE1BQUUsR0FBbUIsR0FBRyxVQUFBLE9BQU8sS0FBSyxDQUFjO1lBQ2xELFFBQUksR0FBaUIsYUFBYSxDQUFnQjtZQUNsRCxVQUFNLEdBQWUsQ0FBQyxDQUE0QjtZQUNsRCxlQUFXLEdBQVUsQ0FBQyxDQUE0QjtZQUNsRCxrQkFBYyxHQUFPLEVBQUUsQ0FBMkI7WUFDbEQsaUJBQWEsR0FBUSxvQkFBVSxDQUFDLGdCQUFnQixDQUFFO1lBQ2xELHNCQUFrQixHQUFHLElBQUksQ0FBeUI7WUFDbEQsb0JBQWdCLEdBQUssSUFBSSxDQUF5QjtRQUNuRSxDQUFDLEVBVmEsR0FBRyxHQUFILE9BQUcsS0FBSCxPQUFHLFFBVWhCO0lBRUwsQ0FBQyxFQWpCYSxHQUFHLEdBQUgsYUFBRyxLQUFILGFBQUcsUUFpQmhCO0lBRUQsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUVqQixJQUFjLFlBQVksQ0FlekI7SUFmRCxXQUFjLFlBQVk7UUFFVCxlQUFFLEdBQVcsR0FBRyxVQUFBLE9BQU8sVUFBVSxDQUFFO1FBQ25DLG9CQUFPLEdBQU0sR0FBRyxhQUFBLEVBQUUsT0FBTyxDQUFVO1FBQ25DLHVCQUFVLEdBQUcsSUFBSSxDQUFrQjtRQUVoRCxhQUFhO1FBQ2IsYUFBYTtRQUViLElBQWMsU0FBUyxDQUl0QjtRQUpELFdBQWMsU0FBUztZQUVOLFlBQUUsR0FBRyxHQUFHLFVBQUEsT0FBTyxXQUFXLENBQUs7UUFFaEQsQ0FBQyxFQUphLFNBQVMsR0FBVCxzQkFBUyxLQUFULHNCQUFTLFFBSXRCO0lBRUwsQ0FBQyxFQWZhLFlBQVksR0FBWixzQkFBWSxLQUFaLHNCQUFZLFFBZXpCO0FBRUwsQ0FBQyxFQXBFYSxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQW9FdEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbnN0YW50cyBGaWxlLiBEZWZpbmVzIHByb2plY3Qtd2lkZSBjb25zdGFudHMuXG4gKiBAdmVyc2lvbiAwLjEuMFxuICovXG5cbmltcG9ydCB7IFN1Ym5ldFR5cGUgfSBmcm9tICdAYXdzLWNkay9hd3MtZWMyJ1xuXG5leHBvcnQgbW9kdWxlIENvbnN0YW50cyB7XG5cbiAgICAvLy8gLS0tXG4gICAgLy8vIEFwcFxuICAgIFxuICAgIGV4cG9ydCBjb25zdCBBY2NvdW50ID0gJydcdFx0O1xuICAgIGV4cG9ydCBjb25zdCBSZWdpb24gID0gJ3VzLXdlc3QtMScgIDtcbiAgICBleHBvcnQgY29uc3QgQXBwTmFtZSA9ICdEZXZIb3VyJyAgICA7XG5cbiAgICAvLy8gLS0tLS0tXG4gICAgLy8vIFN0YWdlc1xuXG4gICAgZXhwb3J0IG1vZHVsZSBTdGFnZXMge1xuXG4gICAgICAgIC8vLyAtLS0tLVxuICAgICAgICAvLy8gQWxwaGFcblxuICAgICAgICBleHBvcnQgbW9kdWxlIEFscGhhIHtcblxuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IE5hbWUgPSAnQWxwaGEnICAgICAgICA7XG4gICAgICAgICAgICBleHBvcnQgY29uc3QgSWQgICA9IGAke05hbWV9U3RhZ2VgIDsgICAgICAgICAgICBcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvLy8gLS0tXG4gICAgLy8vIEVDMlxuXG4gICAgZXhwb3J0IG1vZHVsZSBFQzIge1xuXG4gICAgICAgIC8vLyAtLS1cbiAgICAgICAgLy8vIFZQQ1xuXG4gICAgICAgIGV4cG9ydCBtb2R1bGUgVlBDIHtcblxuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IElkICAgICAgICAgICAgICAgICA9IGAke0FwcE5hbWV9VlBDYCAgICAgICAgICAgICA7XG4gICAgICAgICAgICBleHBvcnQgY29uc3QgQ0lEUiAgICAgICAgICAgICAgID0gYDEwLjAuMC4wLzE2YCAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBNYXhBWnMgICAgICAgICAgICAgPSAyICAgICAgICAgICAgICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IE5BVEdhdGV3YXlzICAgICAgICA9IDAgICAgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICBleHBvcnQgY29uc3QgU3VibmV0Q0lEUk1hc2sgICAgID0gMjQgICAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgIGV4cG9ydCBjb25zdCBWUENTdWJuZXRUeXBlICAgICAgPSBTdWJuZXRUeXBlLlBSSVZBVEVfSVNPTEFURUQgO1xuICAgICAgICAgICAgZXhwb3J0IGNvbnN0IEVuYWJsZUROU0hvc3ROYW1lcyA9IHRydWUgICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICBleHBvcnQgY29uc3QgRW5hYmx0RE5TU3VwcG9ydCAgID0gdHJ1ZSAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLy8vIC0tLS0tLS0tLS0tLS1cbiAgICAvLy8gQ29kZSBQaXBlbGluZVxuXG4gICAgZXhwb3J0IG1vZHVsZSBDb2RlUGlwZWxpbmUge1xuXG4gICAgICAgIGV4cG9ydCBjb25zdCBJZCAgICAgICAgID0gYCR7QXBwTmFtZX1QaXBlbGluZWAgO1xuICAgICAgICBleHBvcnQgY29uc3QgU3RhY2tJZCAgICA9IGAke0lkfVN0YWNrYCAgICAgICAgIDtcbiAgICAgICAgZXhwb3J0IGNvbnN0IFNlbGZNdXRhdGUgPSB0cnVlICAgICAgICAgICAgICAgICA7XG5cbiAgICAgICAgLy8vIC0tLS0tLS0tLVxuICAgICAgICAvLy8gU2hlbGxTdGVwXG5cbiAgICAgICAgZXhwb3J0IG1vZHVsZSBTaGVsbFN0ZXAge1xuXG4gICAgICAgICAgICBleHBvcnQgY29uc3QgSWQgPSBgJHtBcHBOYW1lfVNoZWxsU3RlcGAgICAgO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxufVxuIl19