"use strict";
/**
 * Cognito Stack
 * @version 0.9.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CognitoStack = void 0;
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_secretsmanager_1 = require("aws-cdk-lib/aws-secretsmanager");
const constants_1 = require("./constants");
const roles_1 = require("./roles");
/// ---------------------------
/// CognitoStack Implementation
class CognitoStack extends aws_cdk_lib_1.Stack {
    constructor(scope, props) {
        super(scope, props.stackId, { env: {
                account: props.account,
                region: props.region
            } });
        this.userPool = new aws_cognito_1.UserPool(this, props.userPoolId, {
            selfSignUpEnabled: props.selfSignUpEnabled,
            signInAliases: {
                username: props.enableAliasUsername,
                email: props.enableAliasEmail
            },
            standardAttributes: {
                fullname: {
                    required: props.fullnameRequired,
                    mutable: props.fullnameMutable
                }
            },
            passwordPolicy: {
                minLength: props.passwordMinimumLength,
            },
        });
        this.userPoolClient = new aws_cognito_1.UserPoolClient(this, props.userPoolClientId, {
            userPool: this.userPool
        });
        this.userPoolIdentityProviderAmazon = new aws_cognito_1.UserPoolIdentityProviderAmazon(this, props.identityProviderId, {
            userPool: this.userPool,
            clientId: props.userPoolClientId,
            clientSecret: aws_secretsmanager_1.Secret.fromSecretAttributes(this, `${props.id}IdentityProviderSecret`, {
                secretCompleteArn: constants_1.Constants.Cognito.IdentityProviderSecretArn
            }).secretValue.toString()
        });
        const identityProviderDomain = `cognito-idp.${aws_cdk_lib_1.Stack.of(this).region}.amazonaws.com/${this.userPool.userPoolId}:${this.userPoolClient.userPoolClientId}`;
        this.identityPool = new aws_cognito_1.CfnIdentityPool(this, props.identityPoolId, {
            allowUnauthenticatedIdentities: props.allowUnauthenticatedIdentities,
            cognitoIdentityProviders: [{
                    clientId: this.userPoolClient.userPoolClientId,
                    providerName: this.userPool.userPoolProviderName
                }]
        });
        const defaultPolicy = new aws_cognito_1.CfnIdentityPoolRoleAttachment(this, `${props.id}DefaultPolicy`, {
            identityPoolId: this.identityPool.ref,
            roles: {
                authenticated: new roles_1.Roles.Cognito.AuthenticatedRole(this, constants_1.Constants.Cognito.AuthenticatedRoleId, props.resourceArns, this.identityPool.ref),
                unauthenticated: new roles_1.Roles.Cognito.UnauthenticatedRole(this, constants_1.Constants.Cognito.UnauthenticatedRoleId, props.resourceArns, this.identityPool.ref)
            }
        });
    }
}
exports.CognitoStack = CognitoStack;
//# sourceMappingURL=data:application/json;base64,