"use strict";
/**
 * VPC Stack
 * @version 0.9.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpcStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
/// -----------------------
/// VpcStack Implementation
class VpcStack extends aws_cdk_lib_1.Stack {
    /// -----------
    /// Constructor
    constructor(scope, props) {
        super(scope, props.stackId, { env: {
                account: props.account,
                region: props.region
            } });
        this._vpc = new aws_ec2_1.Vpc(this, props.id, {
            cidr: props.cidr,
            maxAzs: props.maxAzs,
            natGateways: props.natGateways,
            enableDnsHostnames: props.enableDnsHostnames,
            enableDnsSupport: props.enableDnsSupport,
            subnetConfiguration: props.subnetConfiguration
        });
    }
    /// -------
    /// Getters
    get vpc() {
        return this._vpc;
    }
    get privateNatSubnets() {
        return this._vpc.selectSubnets({
            subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_NAT
        });
    }
    get privateIsolatedSubnets() {
        return this._vpc.selectSubnets({
            subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED
        });
    }
    get publicSubnets() {
        return this._vpc.selectSubnets({
            subnetType: aws_ec2_1.SubnetType.PUBLIC
        });
    }
}
exports.VpcStack = VpcStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidnBjLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7OztBQUdILDZDQUFtQztBQUNuQyxpREFBMEU7QUFrQjFFLDJCQUEyQjtBQUMzQiwyQkFBMkI7QUFFM0IsTUFBYSxRQUFTLFNBQVEsbUJBQUs7SUFPL0IsZUFBZTtJQUNmLGVBQWU7SUFFZixZQUFZLEtBQWdCLEVBQUUsS0FBb0I7UUFDOUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFO2dCQUMvQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87Z0JBQ3RCLE1BQU0sRUFBRyxLQUFLLENBQUMsTUFBTTthQUN4QixFQUFDLENBQUMsQ0FBQztRQUVKLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxhQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDakMsSUFBSSxFQUFrQixLQUFLLENBQUMsSUFBSTtZQUNoQyxNQUFNLEVBQWdCLEtBQUssQ0FBQyxNQUFNO1lBQ2xDLFdBQVcsRUFBVyxLQUFLLENBQUMsV0FBVztZQUN2QyxrQkFBa0IsRUFBSSxLQUFLLENBQUMsa0JBQWtCO1lBQzlDLGdCQUFnQixFQUFNLEtBQUssQ0FBQyxnQkFBZ0I7WUFDNUMsbUJBQW1CLEVBQUcsS0FBSyxDQUFDLG1CQUFtQjtTQUNqRCxDQUFDLENBQUM7SUFFUCxDQUFDO0lBRUQsV0FBVztJQUNYLFdBQVc7SUFFWCxJQUFXLEdBQUc7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELElBQVcsaUJBQWlCO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDM0IsVUFBVSxFQUFFLG9CQUFVLENBQUMsZ0JBQWdCO1NBQzFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFXLHNCQUFzQjtRQUM3QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1lBQzNCLFVBQVUsRUFBRSxvQkFBVSxDQUFDLGdCQUFnQjtTQUMxQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsSUFBVyxhQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDM0IsVUFBVSxFQUFFLG9CQUFVLENBQUMsTUFBTTtTQUNoQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBRUo7QUFwREQsNEJBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBWUEMgU3RhY2tcbiAqIEB2ZXJzaW9uIDAuOS4wXG4gKi9cblxuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cydcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInXG5pbXBvcnQgeyBWcGMsIFN1Ym5ldENvbmZpZ3VyYXRpb24sIFN1Ym5ldFR5cGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWMyJ1xuXG4vLy8gLS0tLS0tLS0tLS0tLVxuLy8vIFZwY1N0YWNrUHJvcHNcblxuZXhwb3J0IGludGVyZmFjZSBWcGNTdGFja1Byb3BzIHtcbiAgICBhY2NvdW50OiAgICAgICAgICAgICAgICBzdHJpbmcsXG4gICAgcmVnaW9uOiAgICAgICAgICAgICAgICAgc3RyaW5nLFxuICAgIGlkOiAgICAgICAgICAgICAgICAgICAgIHN0cmluZyxcbiAgICBzdGFja0lkOiAgICAgICAgICAgICAgICBzdHJpbmcsXG4gICAgY2lkcjogICAgICAgICAgICAgICAgICAgc3RyaW5nLFxuICAgIG1heEF6czogICAgICAgICAgICAgICAgIG51bWJlcixcbiAgICBuYXRHYXRld2F5czogICAgICAgICAgICBudW1iZXIsXG4gICAgc3VibmV0Q29uZmlndXJhdGlvbjogICAgU3VibmV0Q29uZmlndXJhdGlvbltdLFxuICAgIGVuYWJsZURuc0hvc3RuYW1lczogICAgIGJvb2xlYW4sXG4gICAgZW5hYmxlRG5zU3VwcG9ydDogICAgICAgYm9vbGVhblxufVxuXG4vLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vLyBWcGNTdGFjayBJbXBsZW1lbnRhdGlvblxuXG5leHBvcnQgY2xhc3MgVnBjU3RhY2sgZXh0ZW5kcyBTdGFjayB7XG5cbiAgICAvLy8gLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8vIFByaXZhdGUgTWVtYmVyc1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdnBjOiBWcGM7XG5cbiAgICAvLy8gLS0tLS0tLS0tLS1cbiAgICAvLy8gQ29uc3RydWN0b3JcblxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIHByb3BzOiBWcGNTdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBwcm9wcy5zdGFja0lkLCB7IGVudjoge1xuICAgICAgICAgICAgYWNjb3VudDogcHJvcHMuYWNjb3VudCxcbiAgICAgICAgICAgIHJlZ2lvbjogIHByb3BzLnJlZ2lvblxuICAgICAgICB9fSk7XG5cbiAgICAgICAgdGhpcy5fdnBjID0gbmV3IFZwYyh0aGlzLCBwcm9wcy5pZCwge1xuICAgICAgICAgICBjaWRyOiAgICAgICAgICAgICAgICAgcHJvcHMuY2lkcixcbiAgICAgICAgICAgbWF4QXpzOiAgICAgICAgICAgICAgIHByb3BzLm1heEF6cyxcbiAgICAgICAgICAgbmF0R2F0ZXdheXM6ICAgICAgICAgIHByb3BzLm5hdEdhdGV3YXlzLFxuICAgICAgICAgICBlbmFibGVEbnNIb3N0bmFtZXM6ICAgcHJvcHMuZW5hYmxlRG5zSG9zdG5hbWVzLFxuICAgICAgICAgICBlbmFibGVEbnNTdXBwb3J0OiAgICAgcHJvcHMuZW5hYmxlRG5zU3VwcG9ydCxcbiAgICAgICAgICAgc3VibmV0Q29uZmlndXJhdGlvbjogIHByb3BzLnN1Ym5ldENvbmZpZ3VyYXRpb25cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvLy8gLS0tLS0tLVxuICAgIC8vLyBHZXR0ZXJzXG5cbiAgICBwdWJsaWMgZ2V0IHZwYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZwYztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHByaXZhdGVOYXRTdWJuZXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdnBjLnNlbGVjdFN1Ym5ldHMoe1xuICAgICAgICAgICAgc3VibmV0VHlwZTogU3VibmV0VHlwZS5QUklWQVRFX1dJVEhfTkFUXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgZ2V0IHByaXZhdGVJc29sYXRlZFN1Ym5ldHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92cGMuc2VsZWN0U3VibmV0cyh7XG4gICAgICAgICAgICBzdWJuZXRUeXBlOiBTdWJuZXRUeXBlLlBSSVZBVEVfSVNPTEFURURcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBwdWJsaWNTdWJuZXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdnBjLnNlbGVjdFN1Ym5ldHMoe1xuICAgICAgICAgICAgc3VibmV0VHlwZTogU3VibmV0VHlwZS5QVUJMSUNcbiAgICAgICAgfSk7XG4gICAgfVxuXG59XG5cbiJdfQ==