{
  "author": {
    "name": "Amazon Web Services",
    "organization": true,
    "roles": [
      "author"
    ],
    "url": "https://aws.amazon.com"
  },
  "dependencies": {
    "@aws-cdk/aws-cognito": "1.173.0",
    "@aws-cdk/aws-iam": "1.173.0",
    "@aws-cdk/core": "1.173.0",
    "constructs": "^3.3.69"
  },
  "dependencyClosure": {
    "@aws-cdk/assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.Assets",
          "packageId": "Amazon.CDK.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.assets"
        },
        "js": {
          "npm": "@aws-cdk/assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.assets",
          "module": "aws_cdk.assets"
        }
      }
    },
    "@aws-cdk/aws-acmpca": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ACMPCA",
          "packageId": "Amazon.CDK.AWS.ACMPCA"
        },
        "java": {
          "maven": {
            "artifactId": "acmpca",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.acmpca"
        },
        "js": {
          "npm": "@aws-cdk/aws-acmpca"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-acmpca",
          "module": "aws_cdk.aws_acmpca"
        }
      }
    },
    "@aws-cdk/aws-applicationautoscaling": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ApplicationAutoScaling",
          "packageId": "Amazon.CDK.AWS.ApplicationAutoScaling"
        },
        "java": {
          "maven": {
            "artifactId": "applicationautoscaling",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.applicationautoscaling"
        },
        "js": {
          "npm": "@aws-cdk/aws-applicationautoscaling"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-applicationautoscaling",
          "module": "aws_cdk.aws_applicationautoscaling"
        }
      }
    },
    "@aws-cdk/aws-autoscaling-common": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.AutoScaling.Common",
          "packageId": "Amazon.CDK.AWS.AutoScaling.Common"
        },
        "java": {
          "maven": {
            "artifactId": "autoscaling-common",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.autoscaling.common"
        },
        "js": {
          "npm": "@aws-cdk/aws-autoscaling-common"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-autoscaling-common",
          "module": "aws_cdk.aws_autoscaling_common"
        }
      }
    },
    "@aws-cdk/aws-certificatemanager": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CertificateManager",
          "packageId": "Amazon.CDK.AWS.CertificateManager"
        },
        "java": {
          "maven": {
            "artifactId": "certificatemanager",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.certificatemanager"
        },
        "js": {
          "npm": "@aws-cdk/aws-certificatemanager"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-certificatemanager",
          "module": "aws_cdk.aws_certificatemanager"
        }
      }
    },
    "@aws-cdk/aws-cloudformation": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudFormation",
          "packageId": "Amazon.CDK.AWS.CloudFormation"
        },
        "java": {
          "maven": {
            "artifactId": "cloudformation",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudformation"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudformation"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudformation",
          "module": "aws_cdk.aws_cloudformation"
        }
      }
    },
    "@aws-cdk/aws-cloudwatch": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CloudWatch",
          "packageId": "Amazon.CDK.AWS.CloudWatch"
        },
        "java": {
          "maven": {
            "artifactId": "cloudwatch",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cloudwatch"
        },
        "js": {
          "npm": "@aws-cdk/aws-cloudwatch"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cloudwatch",
          "module": "aws_cdk.aws_cloudwatch"
        }
      }
    },
    "@aws-cdk/aws-codeguruprofiler": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeGuruProfiler",
          "packageId": "Amazon.CDK.AWS.CodeGuruProfiler"
        },
        "java": {
          "maven": {
            "artifactId": "codeguruprofiler",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codeguruprofiler"
        },
        "js": {
          "npm": "@aws-cdk/aws-codeguruprofiler"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codeguruprofiler",
          "module": "aws_cdk.aws_codeguruprofiler"
        }
      }
    },
    "@aws-cdk/aws-codestarnotifications": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.CodeStarNotifications",
          "packageId": "Amazon.CDK.AWS.CodeStarNotifications"
        },
        "java": {
          "maven": {
            "artifactId": "codestarnotifications",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.codestarnotifications"
        },
        "js": {
          "npm": "@aws-cdk/aws-codestarnotifications"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-codestarnotifications",
          "module": "aws_cdk.aws_codestarnotifications"
        }
      }
    },
    "@aws-cdk/aws-cognito": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Cognito",
          "packageId": "Amazon.CDK.AWS.Cognito"
        },
        "java": {
          "maven": {
            "artifactId": "cognito",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.cognito"
        },
        "js": {
          "npm": "@aws-cdk/aws-cognito"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-cognito",
          "module": "aws_cdk.aws_cognito"
        }
      }
    },
    "@aws-cdk/aws-ec2": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EC2",
          "packageId": "Amazon.CDK.AWS.EC2"
        },
        "java": {
          "maven": {
            "artifactId": "ec2",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ec2"
        },
        "js": {
          "npm": "@aws-cdk/aws-ec2"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ec2",
          "module": "aws_cdk.aws_ec2"
        }
      }
    },
    "@aws-cdk/aws-ecr": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.ECR",
          "packageId": "Amazon.CDK.AWS.ECR"
        },
        "java": {
          "maven": {
            "artifactId": "ecr",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr",
          "module": "aws_cdk.aws_ecr"
        }
      }
    },
    "@aws-cdk/aws-ecr-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Ecr.Assets",
          "packageId": "Amazon.CDK.ECR.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "ecr-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ecr.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-ecr-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ecr-assets",
          "module": "aws_cdk.aws_ecr_assets"
        }
      }
    },
    "@aws-cdk/aws-efs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.EFS",
          "packageId": "Amazon.CDK.AWS.EFS"
        },
        "java": {
          "maven": {
            "artifactId": "efs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.efs"
        },
        "js": {
          "npm": "@aws-cdk/aws-efs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-efs",
          "module": "aws_cdk.aws_efs"
        }
      }
    },
    "@aws-cdk/aws-events": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Events",
          "packageId": "Amazon.CDK.AWS.Events"
        },
        "java": {
          "maven": {
            "artifactId": "events",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.events"
        },
        "js": {
          "npm": "@aws-cdk/aws-events"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-events",
          "module": "aws_cdk.aws_events"
        }
      }
    },
    "@aws-cdk/aws-iam": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.IAM",
          "packageId": "Amazon.CDK.AWS.IAM"
        },
        "java": {
          "maven": {
            "artifactId": "iam",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.iam"
        },
        "js": {
          "npm": "@aws-cdk/aws-iam"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-iam",
          "module": "aws_cdk.aws_iam"
        }
      }
    },
    "@aws-cdk/aws-kms": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.KMS",
          "packageId": "Amazon.CDK.AWS.KMS"
        },
        "java": {
          "maven": {
            "artifactId": "kms",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.kms"
        },
        "js": {
          "npm": "@aws-cdk/aws-kms"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-kms",
          "module": "aws_cdk.aws_kms"
        }
      }
    },
    "@aws-cdk/aws-lambda": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Lambda",
          "packageId": "Amazon.CDK.AWS.Lambda"
        },
        "java": {
          "maven": {
            "artifactId": "lambda",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.lambda"
        },
        "js": {
          "npm": "@aws-cdk/aws-lambda"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-lambda",
          "module": "aws_cdk.aws_lambda"
        }
      }
    },
    "@aws-cdk/aws-logs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Logs",
          "packageId": "Amazon.CDK.AWS.Logs"
        },
        "java": {
          "maven": {
            "artifactId": "logs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.logs"
        },
        "js": {
          "npm": "@aws-cdk/aws-logs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-logs",
          "module": "aws_cdk.aws_logs"
        }
      }
    },
    "@aws-cdk/aws-route53": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Route53",
          "packageId": "Amazon.CDK.AWS.Route53"
        },
        "java": {
          "maven": {
            "artifactId": "route53",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.route53"
        },
        "js": {
          "npm": "@aws-cdk/aws-route53"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-route53",
          "module": "aws_cdk.aws_route53"
        }
      }
    },
    "@aws-cdk/aws-s3": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3",
          "packageId": "Amazon.CDK.AWS.S3"
        },
        "java": {
          "maven": {
            "artifactId": "s3",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3",
          "module": "aws_cdk.aws_s3"
        }
      }
    },
    "@aws-cdk/aws-s3-assets": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.S3.Assets",
          "packageId": "Amazon.CDK.AWS.S3.Assets"
        },
        "java": {
          "maven": {
            "artifactId": "s3-assets",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.s3.assets"
        },
        "js": {
          "npm": "@aws-cdk/aws-s3-assets"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-s3-assets",
          "module": "aws_cdk.aws_s3_assets"
        }
      }
    },
    "@aws-cdk/aws-signer": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.Signer",
          "packageId": "Amazon.CDK.AWS.Signer"
        },
        "java": {
          "maven": {
            "artifactId": "signer",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.signer"
        },
        "js": {
          "npm": "@aws-cdk/aws-signer"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-signer",
          "module": "aws_cdk.aws_signer"
        }
      }
    },
    "@aws-cdk/aws-sns": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SNS",
          "packageId": "Amazon.CDK.AWS.SNS"
        },
        "java": {
          "maven": {
            "artifactId": "sns",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sns"
        },
        "js": {
          "npm": "@aws-cdk/aws-sns"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sns",
          "module": "aws_cdk.aws_sns"
        }
      }
    },
    "@aws-cdk/aws-sqs": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SQS",
          "packageId": "Amazon.CDK.AWS.SQS"
        },
        "java": {
          "maven": {
            "artifactId": "sqs",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.sqs"
        },
        "js": {
          "npm": "@aws-cdk/aws-sqs"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-sqs",
          "module": "aws_cdk.aws_sqs"
        }
      }
    },
    "@aws-cdk/aws-ssm": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.AWS.SSM",
          "packageId": "Amazon.CDK.AWS.SSM"
        },
        "java": {
          "maven": {
            "artifactId": "ssm",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.services.ssm"
        },
        "js": {
          "npm": "@aws-cdk/aws-ssm"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.aws-ssm",
          "module": "aws_cdk.aws_ssm"
        }
      }
    },
    "@aws-cdk/cloud-assembly-schema": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CloudAssembly.Schema",
          "packageId": "Amazon.CDK.CloudAssembly.Schema"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cloud-assembly-schema",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cloudassembly.schema"
        },
        "js": {
          "npm": "@aws-cdk/cloud-assembly-schema"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cloud-assembly-schema",
          "module": "aws_cdk.cloud_assembly_schema"
        }
      }
    },
    "@aws-cdk/core": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK",
          "packageId": "Amazon.CDK"
        },
        "java": {
          "maven": {
            "artifactId": "core",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.core"
        },
        "js": {
          "npm": "@aws-cdk/core"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.core",
          "module": "aws_cdk.core"
        }
      }
    },
    "@aws-cdk/custom-resources": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CustomResources",
          "packageId": "Amazon.CDK.AWS.CustomResources"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-customresources",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.customresources"
        },
        "js": {
          "npm": "@aws-cdk/custom-resources"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.custom-resources",
          "module": "aws_cdk.custom_resources"
        }
      }
    },
    "@aws-cdk/cx-api": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.CXAPI",
          "packageId": "Amazon.CDK.CXAPI"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-cx-api",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.cxapi"
        },
        "js": {
          "npm": "@aws-cdk/cx-api"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.cx-api",
          "module": "aws_cdk.cx_api"
        }
      }
    },
    "@aws-cdk/region-info": {
      "targets": {
        "dotnet": {
          "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
          "namespace": "Amazon.CDK.RegionInfo",
          "packageId": "Amazon.CDK.RegionInfo"
        },
        "java": {
          "maven": {
            "artifactId": "cdk-region-info",
            "groupId": "software.amazon.awscdk"
          },
          "package": "software.amazon.awscdk.regioninfo"
        },
        "js": {
          "npm": "@aws-cdk/region-info"
        },
        "python": {
          "classifiers": [
            "Framework :: AWS CDK",
            "Framework :: AWS CDK :: 1"
          ],
          "distName": "aws-cdk.region-info",
          "module": "aws_cdk.region_info"
        }
      }
    },
    "constructs": {
      "targets": {
        "dotnet": {
          "namespace": "Constructs",
          "packageId": "Constructs"
        },
        "go": {
          "moduleName": "github.com/aws/constructs-go"
        },
        "java": {
          "maven": {
            "artifactId": "constructs",
            "groupId": "software.constructs"
          },
          "package": "software.constructs"
        },
        "js": {
          "npm": "constructs"
        },
        "python": {
          "distName": "constructs",
          "module": "constructs"
        }
      }
    }
  },
  "description": "The CDK Construct Library for AWS::Cognito Identity Pools",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "https://github.com/aws/aws-cdk",
  "jsiiVersion": "1.67.0 (build 2c027f5)",
  "keywords": [
    "aws",
    "cdk",
    "constructs",
    "cognito",
    "identitypool"
  ],
  "license": "Apache-2.0",
  "metadata": {
    "jsii": {
      "compiledWithDeprecationWarnings": true,
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@aws-cdk/aws-cognito-identitypool",
  "readme": {
    "markdown": "# Amazon Cognito Identity Pool Construct Library\n\n> **Identity Pools are in a separate module while the API is being stabilized. Once we stabilize the module, they will**\n**be included into the stable [aws-cognito](../aws-cognito) library. Please provide feedback on this experience by**\n**creating an [issue here](https://github.com/aws/aws-cdk/issues/new/choose)**\n\n<!--BEGIN STABILITY BANNER-->\n\n---\n\n![cdk-constructs: Experimental](https://img.shields.io/badge/cdk--constructs-experimental-important.svg?style=for-the-badge)\n\n> The APIs of higher level constructs in this module are experimental and under active development.\n> They are subject to non-backward compatible changes or removal in any future version. These are\n> not subject to the [Semantic Versioning](https://semver.org/) model and breaking changes will be\n> announced in the release notes. This means that while you may use them, you may need to update\n> your source code when upgrading to a newer version of this package.\n\n---\n\n<!--END STABILITY BANNER-->\n\n[Amazon Cognito Identity Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html) enable you to grant your users access to other AWS services.\n\nIdentity Pools are one of the two main components of [Amazon Cognito](https://docs.aws.amazon.com/cognito/latest/developerguide/what-is-amazon-cognito.html), which provides authentication, authorization, and\nuser management for your web and mobile apps. Your users can sign in directly with a user name and password, or through\na third party such as Facebook, Amazon, Google or Apple.\n\nThe other main component in Amazon Cognito is [user pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). User Pools are user directories that provide sign-up and\nsign-in options for your app users.\n\nThis module is part of the [AWS Cloud Development Kit](https://github.com/aws/aws-cdk) project.\n\n```ts nofixture\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n```\n\n## Table of Contents\n\n- [Identity Pools](#identity-pools)\n  - [Authenticated and Unauthenticated Identities](#authenticated-and-unauthenticated-identities)\n  - [Authentication Providers](#authentication-providers)\n    - [User Pool Authentication Provider](#user-pool-authentication-provider)\n    - [Server Side Token Check](#server-side-token-check)\n    - [Associating an External Provider Directly](#associating-an-external-provider-directly)\n    - [OpenIdConnect and Saml](#openid-connect-and-saml)\n    - [Custom Providers](#custom-providers)\n  - [Role Mapping](#role-mapping)\n    - [Provider Urls](#provider-urls)\n  - [Authentication Flow](#authentication-flow)\n  - [Cognito Sync](#cognito-sync)\n  - [Importing Identity Pools](#importing-identity-pools)\n\n## Identity Pools\n\nIdentity pools provide temporary AWS credentials for users who are guests (unauthenticated) and for users who have been\nauthenticated and received a token. An identity pool is a store of user identity data specific to an account.\n\nIdentity pools can be used in conjunction with Cognito User Pools or by accessing external federated identity providers\ndirectly. Learn more at [Amazon Cognito Identity Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html).\n\n### Authenticated and Unauthenticated Identities\n\nIdentity pools define two types of identities: authenticated(`user`) and unauthenticated (`guest`). Every identity in\nan identity pool is either authenticated or unauthenticated. Each identity pool has a default role for authenticated\nidentities, and a default role for unauthenticated identities. Absent other overriding rules (see below), these are the\nroles that will be assumed by the corresponding users in the authentication process.\n\nA basic Identity Pool with minimal configuration has no required props, with default authenticated (user) and\nunauthenticated (guest) roles applied to the identity pool:\n\n```ts\nnew IdentityPool(this, 'myIdentityPool');\n```\n\nBy default, both the authenticated and unauthenticated roles will have no permissions attached. Grant permissions\nto roles using the public `authenticatedRole` and `unauthenticatedRole` properties:\n\n```ts\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\n\nconst identityPool = new IdentityPool(this, 'myIdentityPool');\ndeclare const table: dynamodb.Table;\n\n// Grant permissions to authenticated users\ntable.grantReadWriteData(identityPool.authenticatedRole);\n// Grant permissions to unauthenticated guest users\ntable.grantReadData(identityPool.unauthenticatedRole);\n\n//Or add policy statements straight to the role\nidentityPool.authenticatedRole.addToPrincipalPolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['dynamodb:*'],\n  resources: ['*'],\n}));\n```\n\nThe default roles can also be supplied in `IdentityPoolProps`:\n\n```ts\nconst stack = new Stack();\nconst authenticatedRole = new iam.Role(this, 'authRole', {\n  assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),\n});\nconst unauthenticatedRole = new iam.Role(this, 'unauthRole', {\n  assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),\n});\nconst identityPool = new IdentityPool(this, 'TestIdentityPoolActions', {\n  authenticatedRole,\n  unauthenticatedRole,\n});\n```\n\n### Authentication Providers\n\nAuthenticated identities belong to users who are authenticated by a public login provider (Amazon Cognito user pools,\nLogin with Amazon, Sign in with Apple, Facebook, Google, SAML, or any OpenID Connect Providers) or a developer provider\n(your own backend authentication process).\n\n[Authentication providers](https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html) can be associated with an Identity Pool by first associating them with a Cognito User Pool or by\nassociating the provider directly with the identity pool.\n\n#### User Pool Authentication Provider\n\nIn order to attach a user pool to an identity pool as an authentication provider, the identity pool needs properties\nfrom both the user pool and the user pool client. For this reason identity pools use a `UserPoolAuthenticationProvider`\nto gather the necessary properties from the user pool constructs.\n\n```ts\nconst userPool = new cognito.UserPool(this, 'Pool');\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    userPools: [new UserPoolAuthenticationProvider({ userPool })],\n  },\n});\n```\n\nUser pools can also be associated with an identity pool after instantiation. The Identity Pool's `addUserPoolAuthentication` method\nreturns the User Pool Client that has been created:\n\n```ts\ndeclare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nconst userPoolClient = identityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n}));\n```\n\n#### Server Side Token Check\n\nWith the `IdentityPool` CDK Construct, by default the pool is configured to check with the integrated user pools to\nmake sure that the user has not been globally signed out or deleted before the identity pool provides an OIDC token or\nAWS credentials for the user.\n\nIf the user is signed out or deleted, the identity pool will return a 400 Not Authorized error. This setting can be\ndisabled, however, in several ways.\n\nSetting `disableServerSideTokenCheck` to true will change the default behavior to no server side token check. Learn\nmore [here](https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_CognitoIdentityProvider.html#CognitoIdentity-Type-CognitoIdentityProvider-ServerSideTokenCheck):\n\n```ts\ndeclare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));\n```\n\n#### Associating an External Provider Directly\n\nOne or more [external identity providers](https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html) can be associated with an identity pool directly using\n`authenticationProviders`:\n\n```ts\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n```\n\nTo associate more than one provider of the same type with the identity pool, use User\nPools, OpenIdConnect, or SAML. Only one provider per external service can be attached directly to the identity pool.\n\n#### OpenId Connect and Saml\n\n[OpenID Connect](https://docs.aws.amazon.com/cognito/latest/developerguide/open-id.html) is an open standard for\nauthentication that is supported by a number of login providers. Amazon Cognito supports linking of identities with\nOpenID Connect providers that are configured through [AWS Identity and Access Management](http://aws.amazon.com/iam/).\n\nAn identity provider that supports [Security Assertion Markup Language 2.0 (SAML 2.0)](https://docs.aws.amazon.com/cognito/latest/developerguide/saml-identity-provider.html) can be used to provide a simple\nonboarding flow for users. The SAML-supporting identity provider specifies the IAM roles that can be assumed by users\nso that different users can be granted different sets of permissions. Associating an OpenId Connect or Saml provider\nwith an identity pool:\n\n```ts\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\ndeclare const samlProvider: iam.SamlProvider;\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    openIdConnectProviders: [openIdConnectProvider],\n    samlProviders: [samlProvider],\n  },\n});\n```\n\n#### Custom Providers\n\nThe identity pool's behavior can be customized further using custom [developer authenticated identities](https://docs.aws.amazon.com/cognito/latest/developerguide/developer-authenticated-identities.html).\nWith developer authenticated identities, users can be registered and authenticated via an existing authentication\nprocess while still using Amazon Cognito to synchronize user data and access AWS resources.\n\nLike the supported external providers, though, only one custom provider can be directly associated with the identity\npool.\n\n```ts\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});\n```\n\n### Role Mapping\n\nIn addition to setting default roles for authenticated and unauthenticated users, identity pools can also be used to\ndefine rules to choose the role for each user based on claims in the user's ID token by using Role Mapping. When using\nrole mapping, it's important to be aware of some of the permissions the role will need. An in depth\nreview of roles and role mapping can be found [here](https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html).\n\nUsing a [token-based approach](https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html#using-tokens-to-assign-roles-to-users) to role mapping will allow mapped roles to be passed through the `cognito:roles` or\n`cognito:preferred_role` claims from the identity provider:\n\n```ts\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    useToken: true,\n  }],\n});\n```\n\nUsing a rule-based approach to role mapping allows roles to be assigned based on custom claims passed from the identity  provider:\n\n```ts\nimport { IdentityPoolProviderUrl, RoleMappingMatchType } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const adminRole: iam.Role;\ndeclare const nonAdminRole: iam.Role;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    rules: [\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        mappedRole: adminRole,\n      },\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        matchType: RoleMappingMatchType.NOTEQUAL,\n        mappedRole: nonAdminRole,\n      }\n    ],\n  }],\n});\n```\n\nRole mappings can also be added after instantiation with the Identity Pool's `addRoleMappings` method:\n\n```ts\nimport { IdentityPoolRoleMapping } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const identityPool: IdentityPool;\ndeclare const myAddedRoleMapping1: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping2: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping3: IdentityPoolRoleMapping;\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);\n```\n\n#### Provider Urls\n\nRole mappings must be associated with the url of an Identity Provider which can be supplied\n`IdentityPoolProviderUrl`. Supported Providers have static Urls that can be used:\n\n```ts\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.FACEBOOK,\n    useToken: true,\n  }],\n});\n```\n\nFor identity providers that don't have static Urls, a custom Url or User Pool Client Url can be supplied:\n\n```ts\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [\n    {\n      providerUrl: IdentityPoolProviderUrl.userPool('cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id'),\n      useToken: true,\n    },\n    {\n      providerUrl: IdentityPoolProviderUrl.custom('my-custom-provider.com'),\n      useToken: true,\n    },\n  ],\n});\n```\n\nSee [here](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypoolroleattachment-rolemapping.html#cfn-cognito-identitypoolroleattachment-rolemapping-identityprovider) for more information.\n\n### Authentication Flow\n\nIdentity Pool [Authentication Flow](https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html) defaults to the enhanced, simplified flow. The Classic (basic) Authentication Flow\ncan also be implemented using `allowClassicFlow`:\n\n```ts\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  allowClassicFlow: true,\n});\n```\n\n### Cognito Sync\n\nIt's now recommended to integrate [AWS AppSync](https://aws.amazon.com/appsync/) for synchronizing app data across devices, so\nCognito Sync features like `PushSync`, `CognitoEvents`, and `CognitoStreams` are not a part of `IdentityPool`. More\ninformation can be found [here](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-sync.html).\n\n### Importing Identity Pools\n\nYou can import existing identity pools into your stack using Identity Pool static methods with the Identity Pool Id or\nArn:\n\n```ts\nIdentityPool.fromIdentityPoolId(this, 'my-imported-identity-pool',\n  'us-east-1:dj2823ryiwuhef937');\nIdentityPool.fromIdentityPoolArn(this, 'my-imported-identity-pool',\n  'arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937');\n```\n\n"
  },
  "repository": {
    "directory": "packages/@aws-cdk/aws-cognito-identitypool",
    "type": "git",
    "url": "https://github.com/aws/aws-cdk.git"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "iconUrl": "https://raw.githubusercontent.com/aws/aws-cdk/master/logo/default-256-dark.png",
      "namespace": "Amazon.CDK.AWS.Cognito.IdentityPool",
      "packageId": "Amazon.CDK.AWS.Cognito.IdentityPool"
    },
    "java": {
      "maven": {
        "artifactId": "cognito-identitypool",
        "groupId": "software.amazon.awscdk"
      },
      "package": "software.amazon.awscdk.services.cognito.identitypool"
    },
    "js": {
      "npm": "@aws-cdk/aws-cognito-identitypool"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS CDK",
        "Framework :: AWS CDK :: 1"
      ],
      "distName": "aws-cdk.aws-cognito-identitypool",
      "module": "aws_cdk.aws_cognito_identitypool"
    }
  },
  "types": {
    "@aws-cdk/aws-cognito-identitypool.IIdentityPool": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "stability": "experimental",
        "summary": "Represents a Cognito IdentityPool."
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPool",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 32
      },
      "name": "IIdentityPool",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 43
          },
          "name": "identityPoolArn",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The id of the Identity Pool in the format REGION:GUID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 37
          },
          "name": "identityPoolId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "Name of the Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 49
          },
          "name": "identityPoolName",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IIdentityPool"
    },
    "@aws-cdk/aws-cognito-identitypool.IIdentityPoolRoleAttachment": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "stability": "experimental",
        "summary": "Represents an Identity Pool Role Attachment."
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPoolRoleAttachment",
      "interfaces": [
        "@aws-cdk/core.IResource"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-role-attachment.ts",
        "line": 22
      },
      "name": "IIdentityPoolRoleAttachment",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Id of the Attachments Underlying Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 26
          },
          "name": "identityPoolId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool-role-attachment:IIdentityPoolRoleAttachment"
    },
    "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "remarks": "You use user pool authentication providers to configure User Pools\nand User Pool Clients for use with Identity Pools",
        "stability": "experimental",
        "summary": "Represents the concept of a User Pool Authentication Provider."
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-user-pool-authentication-provider.ts",
        "line": 16
      },
      "methods": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The method called when a given User Pool Authentication Provider is added (for the first time) to an Identity Pool."
          },
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 21
          },
          "name": "bind",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "identityPool",
              "type": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPool"
              }
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindConfig"
            }
          }
        }
      ],
      "name": "IUserPoolAuthenticationProvider",
      "symbolId": "lib/identitypool-user-pool-authentication-provider:IUserPoolAuthenticationProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPool": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Cognito::IdentityPool",
          "exampleMetadata": "infused"
        },
        "stability": "experimental",
        "summary": "Define a Cognito Identity Pool.",
        "example": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});"
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPool",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/identitypool.ts",
          "line": 389
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "optional": true,
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cognito-identitypool.IIdentityPool"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 308
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an existing Identity Pool from its Arn."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 327
          },
          "name": "fromIdentityPoolArn",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "identityPoolArn",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPool"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Import an existing Identity Pool from its id."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 313
          },
          "name": "fromIdentityPoolId",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "id",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "identityPoolId",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPool"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Adds Role Mappings to Identity Pool."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 459
          },
          "name": "addRoleMappings",
          "parameters": [
            {
              "name": "roleMappings",
              "type": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping"
              },
              "variadic": true
            }
          ],
          "variadic": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Add a User Pool to the IdentityPool and configure User Pool Client to handle identities."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 451
          },
          "name": "addUserPoolAuthentication",
          "parameters": [
            {
              "name": "userPool",
              "type": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider"
              }
            }
          ]
        }
      ],
      "name": "IdentityPool",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Default role for authenticated users."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 372
          },
          "name": "authenticatedRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The ARN of the Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 361
          },
          "name": "identityPoolArn",
          "overrides": "@aws-cdk/aws-cognito-identitypool.IIdentityPool",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The id of the Identity Pool in the format REGION:GUID."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 355
          },
          "name": "identityPoolId",
          "overrides": "@aws-cdk/aws-cognito-identitypool.IIdentityPool",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "custom": {
              "attribute": "true"
            },
            "stability": "experimental",
            "summary": "The name of the Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 367
          },
          "name": "identityPoolName",
          "overrides": "@aws-cdk/aws-cognito-identitypool.IIdentityPool",
          "type": {
            "primitive": "string"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Default role for unauthenticated users."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 377
          },
          "name": "unauthenticatedRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPool"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Login Provider for Identity Federation using Amazon Credentials.",
        "example": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 179
      },
      "name": "IdentityPoolAmazonLoginProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "App Id for Amazon Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 183
          },
          "name": "appId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolAmazonLoginProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Login Provider for Identity Federation using Apple Credentials.",
        "example": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 199
      },
      "name": "IdentityPoolAppleLoginProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "App Id for Apple Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 203
          },
          "name": "servicesId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolAppleLoginProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html",
        "stability": "experimental",
        "summary": "Authentication providers for using in identity pool.",
        "example": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
      "interfaces": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviders"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 276
      },
      "name": "IdentityPoolAuthenticationProviders",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- no Custom Provider",
            "stability": "experimental",
            "summary": "The Developer Provider Name to associate with this Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 300
          },
          "name": "customProvider",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no OpenIdConnectProvider",
            "stability": "experimental",
            "summary": "The OpenIdConnect Provider associated with this Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 288
          },
          "name": "openIdConnectProviders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.IOpenIdConnectProvider"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no SamlProvider",
            "stability": "experimental",
            "summary": "The Security Assertion Markup Language Provider associated with this Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 294
          },
          "name": "samlProviders",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-iam.ISamlProvider"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no User Pools Associated",
            "stability": "experimental",
            "summary": "The User Pool Authentication Providers associated with this Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 282
          },
          "name": "userPools",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider"
              },
              "kind": "array"
            }
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolAuthenticationProviders"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolDigitsLoginProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Login Provider for Identity Federation using Digits Credentials.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst identityPoolDigitsLoginProvider: cognito_identitypool.IdentityPoolDigitsLoginProvider = {\n  consumerKey: 'consumerKey',\n  consumerSecret: 'consumerSecret',\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolDigitsLoginProvider",
      "interfaces": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider"
      ],
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 234
      },
      "name": "IdentityPoolDigitsLoginProvider",
      "symbolId": "lib/identitypool:IdentityPoolDigitsLoginProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Login Provider for Identity Federation using Facebook Credentials.",
        "example": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 189
      },
      "name": "IdentityPoolFacebookLoginProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "App Id for Facebook Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 193
          },
          "name": "appId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolFacebookLoginProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Login Provider for Identity Federation using Google Credentials.",
        "example": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 209
      },
      "name": "IdentityPoolGoogleLoginProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "App Id for Google Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 213
          },
          "name": "clientId",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolGoogleLoginProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for the IdentityPool construct.",
        "example": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 55
      },
      "name": "IdentityPoolProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "- Classic Flow not allowed",
            "stability": "experimental",
            "summary": "Enables the Basic (Classic) authentication flow."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 91
          },
          "name": "allowClassicFlow",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- false",
            "stability": "experimental",
            "summary": "Wwhether the identity pool supports unauthenticated logins."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 79
          },
          "name": "allowUnauthenticatedIdentities",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A Default Authenticated Role will be added",
            "stability": "experimental",
            "summary": "The Default Role to be assumed by Authenticated Users."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 67
          },
          "name": "authenticatedRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Authentication Providers passed directly to Identity Pool",
            "stability": "experimental",
            "summary": "Authentication providers for using in identity pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 97
          },
          "name": "authenticationProviders",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- automatically generated name by CloudFormation at deploy time",
            "stability": "experimental",
            "summary": "The name of the Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 61
          },
          "name": "identityPoolName",
          "optional": true,
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no Role Mappings",
            "stability": "experimental",
            "summary": "Rules for mapping roles to users."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 85
          },
          "name": "roleMappings",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A Default Unauthenticated Role will be added",
            "stability": "experimental",
            "summary": "The Default Role to be assumed by Unauthenticated Users."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 73
          },
          "name": "unauthenticatedRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolProps"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderType": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "stability": "experimental",
        "summary": "Types of Identity Pool Login Providers."
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 103
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Facebook Provider type."
          },
          "name": "FACEBOOK"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Google Provider Type."
          },
          "name": "GOOGLE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Provider Type."
          },
          "name": "AMAZON"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Apple Provider Type."
          },
          "name": "APPLE"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Twitter Provider Type."
          },
          "name": "TWITTER"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Digits Provider Type."
          },
          "name": "DIGITS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Open Id Provider Type."
          },
          "name": "OPEN_ID"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Saml Provider Type."
          },
          "name": "SAML"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "User Pool Provider Type."
          },
          "name": "USER_POOL"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Custom Provider Type."
          },
          "name": "CUSTOM"
        }
      ],
      "name": "IdentityPoolProviderType",
      "symbolId": "lib/identitypool:IdentityPoolProviderType"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "stability": "experimental",
        "summary": "Keys for Login Providers - correspond to client id's of respective federation identity providers.",
        "example": "import { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [\n    {\n      providerUrl: IdentityPoolProviderUrl.userPool('cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id'),\n      useToken: true,\n    },\n    {\n      providerUrl: IdentityPoolProviderUrl.custom('my-custom-provider.com'),\n      useToken: true,\n    },\n  ],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/identitypool.ts",
          "line": 168
        },
        "parameters": [
          {
            "docs": {
              "summary": "type of Provider Url."
            },
            "name": "type",
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderType"
            }
          },
          {
            "docs": {
              "summary": "value of Provider Url."
            },
            "name": "value",
            "type": {
              "primitive": "string"
            }
          }
        ]
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 129
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Custom Provider Url."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 164
          },
          "name": "custom",
          "parameters": [
            {
              "name": "url",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "OpenId Provider Url."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 149
          },
          "name": "openId",
          "parameters": [
            {
              "name": "url",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "Saml Provider Url."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 154
          },
          "name": "saml",
          "parameters": [
            {
              "name": "url",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "User Pool Provider Url."
          },
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 159
          },
          "name": "userPool",
          "parameters": [
            {
              "name": "url",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
            }
          },
          "static": true
        }
      ],
      "name": "IdentityPoolProviderUrl",
      "properties": [
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Amazon Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 137
          },
          "name": "AMAZON",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Apple Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 140
          },
          "name": "APPLE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Digits Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 146
          },
          "name": "DIGITS",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Facebook Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 131
          },
          "name": "FACEBOOK",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Google Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 134
          },
          "name": "GOOGLE",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "const": true,
          "docs": {
            "stability": "experimental",
            "summary": "Twitter Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 143
          },
          "name": "TWITTER",
          "static": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "type of Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 170
          },
          "name": "type",
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderType"
          }
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "value of Provider Url."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 172
          },
          "name": "value",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolProviderUrl"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviders": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "External Identity Providers To Connect to User Pools and Identity Pools.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst identityPoolProviders: cognito_identitypool.IdentityPoolProviders = {\n  amazon: {\n    appId: 'appId',\n  },\n  apple: {\n    servicesId: 'servicesId',\n  },\n  digits: {\n    consumerKey: 'consumerKey',\n    consumerSecret: 'consumerSecret',\n  },\n  facebook: {\n    appId: 'appId',\n  },\n  google: {\n    clientId: 'clientId',\n  },\n  twitter: {\n    consumerKey: 'consumerKey',\n    consumerSecret: 'consumerSecret',\n  },\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviders",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 239
      },
      "name": "IdentityPoolProviders",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "default": "-  No Amazon Authentication Provider used without OpenIdConnect or a User Pool",
            "stability": "experimental",
            "summary": "App Id for Amazon Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 254
          },
          "name": "amazon",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Apple Authentication Provider used without OpenIdConnect or a User Pool",
            "stability": "experimental",
            "summary": "Services Id for Apple Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 259
          },
          "name": "apple",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Digits Authentication Provider used without OpenIdConnect or a User Pool",
            "stability": "experimental",
            "summary": "Consumer Key and Secret for Digits Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 269
          },
          "name": "digits",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolDigitsLoginProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Facebook Authentication Provider used without OpenIdConnect or a User Pool",
            "stability": "experimental",
            "summary": "App Id for Facebook Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 244
          },
          "name": "facebook",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Google Authentication Provider used without OpenIdConnect or a User Pool",
            "stability": "experimental",
            "summary": "Client Id for Google Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 249
          },
          "name": "google",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Twitter Authentication Provider used without OpenIdConnect or a User Pool",
            "stability": "experimental",
            "summary": "Consumer Key and Secret for Twitter Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 264
          },
          "name": "twitter",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolProviders"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachment": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "base": "@aws-cdk/core.Resource",
      "docs": {
        "custom": {
          "resource": "AWS::Cognito::IdentityPoolRoleAttachment",
          "exampleMetadata": "fixture=_generated"
        },
        "stability": "experimental",
        "summary": "Defines an Identity Pool Role Attachment.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const identityPool: cognito_identitypool.IdentityPool;\ndeclare const identityPoolProviderUrl: cognito_identitypool.IdentityPoolProviderUrl;\ndeclare const role: iam.Role;\nconst identityPoolRoleAttachment = new cognito_identitypool.IdentityPoolRoleAttachment(this, 'MyIdentityPoolRoleAttachment', {\n  identityPool: identityPool,\n\n  // the properties below are optional\n  authenticatedRole: role,\n  roleMappings: [{\n    providerUrl: identityPoolProviderUrl,\n\n    // the properties below are optional\n    resolveAmbiguousRoles: false,\n    rules: [{\n      claim: 'claim',\n      claimValue: 'claimValue',\n      mappedRole: role,\n\n      // the properties below are optional\n      matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n    }],\n    useToken: false,\n  }],\n  unauthenticatedRole: role,\n});"
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachment",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/identitypool-role-attachment.ts",
          "line": 151
        },
        "parameters": [
          {
            "name": "scope",
            "type": {
              "fqn": "constructs.Construct"
            }
          },
          {
            "name": "id",
            "type": {
              "primitive": "string"
            }
          },
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachmentProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cognito-identitypool.IIdentityPoolRoleAttachment"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/identitypool-role-attachment.ts",
        "line": 145
      },
      "name": "IdentityPoolRoleAttachment",
      "properties": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "Id of the underlying identity pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 149
          },
          "name": "identityPoolId",
          "overrides": "@aws-cdk/aws-cognito-identitypool.IIdentityPoolRoleAttachment",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool-role-attachment:IdentityPoolRoleAttachment"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachmentProps": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for an Identity Pool Role Attachment.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const identityPool: cognito_identitypool.IdentityPool;\ndeclare const identityPoolProviderUrl: cognito_identitypool.IdentityPoolProviderUrl;\ndeclare const role: iam.Role;\nconst identityPoolRoleAttachmentProps: cognito_identitypool.IdentityPoolRoleAttachmentProps = {\n  identityPool: identityPool,\n\n  // the properties below are optional\n  authenticatedRole: role,\n  roleMappings: [{\n    providerUrl: identityPoolProviderUrl,\n\n    // the properties below are optional\n    resolveAmbiguousRoles: false,\n    rules: [{\n      claim: 'claim',\n      claimValue: 'claimValue',\n      mappedRole: role,\n\n      // the properties below are optional\n      matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n    }],\n    useToken: false,\n  }],\n  unauthenticatedRole: role,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachmentProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-role-attachment.ts",
        "line": 32
      },
      "name": "IdentityPoolRoleAttachmentProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Id of the Attachments Underlying Identity Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 37
          },
          "name": "identityPool",
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPool"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No default authenticated role will be added",
            "stability": "experimental",
            "summary": "Default Authenticated (User) Role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 43
          },
          "name": "authenticatedRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- no Role Mappings",
            "stability": "experimental",
            "summary": "Rules for mapping roles to users."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 55
          },
          "name": "roleMappings",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No default unauthenticated role will be added",
            "stability": "experimental",
            "summary": "Default Unauthenticated (Guest) Role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 49
          },
          "name": "unauthenticatedRole",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        }
      ],
      "symbolId": "lib/identitypool-role-attachment:IdentityPoolRoleAttachmentProps"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolroleattachment.html",
        "stability": "experimental",
        "summary": "Map roles to users in the identity pool based on claims from the Identity Provider.",
        "example": "import { IdentityPoolRoleMapping } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const identityPool: IdentityPool;\ndeclare const myAddedRoleMapping1: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping2: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping3: IdentityPoolRoleMapping;\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-role-attachment.ts",
        "line": 62
      },
      "name": "IdentityPoolRoleMapping",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The url of the provider of for which the role is mapped."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 66
          },
          "name": "providerUrl",
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false - Ambiguous role resolutions will lead to requester being denied",
            "stability": "experimental",
            "summary": "Allow for role assumption when results of role mapping are ambiguous."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 80
          },
          "name": "resolveAmbiguousRoles",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- No Rule Mapping Rule",
            "remarks": "Required if useToken is false",
            "stability": "experimental",
            "summary": "The claim and value that must be matched in order to assume the role."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 86
          },
          "name": "rules",
          "optional": true,
          "type": {
            "collection": {
              "elementtype": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.RoleMappingRule"
              },
              "kind": "array"
            }
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "see": "https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html#using-tokens-to-assign-roles-to-users",
            "stability": "experimental",
            "summary": "If true then mapped roles must be passed through the cognito:roles or cognito:preferred_role claims from identity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 74
          },
          "name": "useToken",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/identitypool-role-attachment:IdentityPoolRoleMapping"
    },
    "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Login Provider for Identity Federation using Twitter Credentials.",
        "example": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool.ts",
        "line": 219
      },
      "name": "IdentityPoolTwitterLoginProvider",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "App Id for Twitter Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 223
          },
          "name": "consumerKey",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "App Secret for Twitter Identity Federation."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool.ts",
            "line": 228
          },
          "name": "consumerSecret",
          "type": {
            "primitive": "string"
          }
        }
      ],
      "symbolId": "lib/identitypool:IdentityPoolTwitterLoginProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "stability": "experimental",
        "summary": "Types of matches allowed for Role Mapping.",
        "example": "import { IdentityPoolProviderUrl, RoleMappingMatchType } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const adminRole: iam.Role;\ndeclare const nonAdminRole: iam.Role;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    rules: [\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        mappedRole: adminRole,\n      },\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        matchType: RoleMappingMatchType.NOTEQUAL,\n        mappedRole: nonAdminRole,\n      }\n    ],\n  }],\n});",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType",
      "kind": "enum",
      "locationInModule": {
        "filename": "lib/identitypool-role-attachment.ts",
        "line": 92
      },
      "members": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Claim from the token must equal the given value in order for a match."
          },
          "name": "EQUALS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Claim from the token must contain the given value in order for a match."
          },
          "name": "CONTAINS"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Claim from the token must start with the given value in order for a match."
          },
          "name": "STARTS_WITH"
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "The Claim from the token must not equal the given value in order for a match."
          },
          "name": "NOTEQUAL"
        }
      ],
      "name": "RoleMappingMatchType",
      "symbolId": "lib/identitypool-role-attachment:RoleMappingMatchType"
    },
    "@aws-cdk/aws-cognito-identitypool.RoleMappingRule": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents an Identity Pool Role Attachment Role Mapping Rule.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst roleMappingRule: cognito_identitypool.RoleMappingRule = {\n  claim: 'claim',\n  claimValue: 'claimValue',\n  mappedRole: role,\n\n  // the properties below are optional\n  matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.RoleMappingRule",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-role-attachment.ts",
        "line": 117
      },
      "name": "RoleMappingRule",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The key sent in the token by the federated identity provider."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 121
          },
          "name": "claim",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The value of the claim that must be matched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 131
          },
          "name": "claimValue",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The Role to be assumed when Claim Value is matched."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 126
          },
          "name": "mappedRole",
          "type": {
            "fqn": "@aws-cdk/aws-iam.IRole"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "RoleMappingMatchType.EQUALS",
            "stability": "experimental",
            "summary": "How to match with the Claim value."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-role-attachment.ts",
            "line": 137
          },
          "name": "matchType",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType"
          }
        }
      ],
      "symbolId": "lib/identitypool-role-attachment:RoleMappingRule"
    },
    "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "docs": {
        "stability": "experimental",
        "summary": "Defines a User Pool Authentication Provider.",
        "example": "declare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider",
      "initializer": {
        "docs": {
          "stability": "experimental"
        },
        "locationInModule": {
          "filename": "lib/identitypool-user-pool-authentication-provider.ts",
          "line": 96
        },
        "parameters": [
          {
            "name": "props",
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps"
            }
          }
        ]
      },
      "interfaces": [
        "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider"
      ],
      "kind": "class",
      "locationInModule": {
        "filename": "lib/identitypool-user-pool-authentication-provider.ts",
        "line": 80
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "The method called when a given User Pool Authentication Provider is added (for the first time) to an Identity Pool."
          },
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 102
          },
          "name": "bind",
          "overrides": "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider",
          "parameters": [
            {
              "name": "scope",
              "type": {
                "fqn": "constructs.Construct"
              }
            },
            {
              "name": "identityPool",
              "type": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.IIdentityPool"
              }
            },
            {
              "name": "_options",
              "optional": true,
              "type": {
                "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindOptions"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindConfig"
            }
          }
        }
      ],
      "name": "UserPoolAuthenticationProvider",
      "symbolId": "lib/identitypool-user-pool-authentication-provider:UserPoolAuthenticationProvider"
    },
    "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindConfig": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents a UserPoolAuthenticationProvider Bind Configuration.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst userPoolAuthenticationProviderBindConfig: cognito_identitypool.UserPoolAuthenticationProviderBindConfig = {\n  clientId: 'clientId',\n  providerName: 'providerName',\n  serverSideTokenCheck: false,\n};",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindConfig",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-user-pool-authentication-provider.ts",
        "line": 60
      },
      "name": "UserPoolAuthenticationProviderBindConfig",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Client Id of the Associated User Pool Client."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 64
          },
          "name": "clientId",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The identity providers associated with the UserPool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 69
          },
          "name": "providerName",
          "type": {
            "primitive": "string"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "Whether to enable the identity pool's server side token check."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 74
          },
          "name": "serverSideTokenCheck",
          "type": {
            "primitive": "boolean"
          }
        }
      ],
      "symbolId": "lib/identitypool-user-pool-authentication-provider:UserPoolAuthenticationProviderBindConfig"
    },
    "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindOptions": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Represents UserPoolAuthenticationProvider Bind Options.",
        "example": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst userPoolAuthenticationProviderBindOptions: cognito_identitypool.UserPoolAuthenticationProviderBindOptions = { };",
        "custom": {
          "exampleMetadata": "fixture=_generated"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindOptions",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-user-pool-authentication-provider.ts",
        "line": 55
      },
      "name": "UserPoolAuthenticationProviderBindOptions",
      "symbolId": "lib/identitypool-user-pool-authentication-provider:UserPoolAuthenticationProviderBindOptions"
    },
    "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps": {
      "assembly": "@aws-cdk/aws-cognito-identitypool",
      "datatype": true,
      "docs": {
        "stability": "experimental",
        "summary": "Props for the User Pool Authentication Provider.",
        "example": "declare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));",
        "custom": {
          "exampleMetadata": "infused"
        }
      },
      "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/identitypool-user-pool-authentication-provider.ts",
        "line": 31
      },
      "name": "UserPoolAuthenticationProviderProps",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The User Pool of the Associated Identity Providers."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 35
          },
          "name": "userPool",
          "type": {
            "fqn": "@aws-cdk/aws-cognito.IUserPool"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "false",
            "see": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cognito-identitypool-cognitoidentityprovider.html",
            "stability": "experimental",
            "summary": "Setting this to true turns off identity pool checks for this user pool to make sure the user has not been globally signed out or deleted before the identity pool provides an OIDC token or AWS credentials for the user."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 48
          },
          "name": "disableServerSideTokenCheck",
          "optional": true,
          "type": {
            "primitive": "boolean"
          }
        },
        {
          "abstract": true,
          "docs": {
            "default": "- A default user pool client will be added to User Pool",
            "stability": "experimental",
            "summary": "The User Pool Client for the provided User Pool."
          },
          "immutable": true,
          "locationInModule": {
            "filename": "lib/identitypool-user-pool-authentication-provider.ts",
            "line": 41
          },
          "name": "userPoolClient",
          "optional": true,
          "type": {
            "fqn": "@aws-cdk/aws-cognito.IUserPoolClient"
          }
        }
      ],
      "symbolId": "lib/identitypool-user-pool-authentication-provider:UserPoolAuthenticationProviderProps"
    }
  },
  "version": "1.173.0",
  "fingerprint": "**********"
}