{
  "version": "2",
  "toolVersion": "1.67.0",
  "snippets": {
    "0190fb43fe8f7631969a5f2ecac3ebc02224a79f352eb5ef9dcd5147b6f27262": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPool, UserPoolAuthenticationProvider",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPool;\nimport software.amazon.awscdk.services.cognito.identitypool.UserPoolAuthenticationProvider;",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 34
        }
      },
      "didCompile": true,
      "fqnsReferenced": [],
      "fullSource": "import { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';",
      "syntaxKindCounter": {
        "10": 1,
        "75": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "290": 1
      },
      "fqnsFingerprint": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
    },
    "d16a72896cc5e72f1c3c3104d09bd595af797137dfa273b8d17c4c8a08b08b09": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myIdentityPool\")",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myIdentityPool\");",
          "version": "1"
        },
        "java": {
          "source": "new IdentityPool(this, \"myIdentityPool\");",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myIdentityPool\"))",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myIdentityPool');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 72
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myIdentityPool');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 1,
        "104": 1,
        "197": 1,
        "226": 1
      },
      "fqnsFingerprint": "f13b0484f6b153afe8c1f01056004e972bf9adad26bd73b15e242ba8a489fbd9"
    },
    "64ce40cc9884633c106f73432b90319cbb29d801a27338b68302d9babbc3a0f8": {
      "translations": {
        "python": {
          "source": "import aws_cdk.aws_dynamodb as dynamodb\n# table: dynamodb.Table\n\n\nidentity_pool = IdentityPool(self, \"myIdentityPool\")\n\n# Grant permissions to authenticated users\ntable.grant_read_write_data(identity_pool.authenticated_role)\n# Grant permissions to unauthenticated guest users\ntable.grant_read_data(identity_pool.unauthenticated_role)\n\n# Or add policy statements straight to the role\nidentity_pool.authenticated_role.add_to_principal_policy(iam.PolicyStatement(\n    effect=iam.Effect.ALLOW,\n    actions=[\"dynamodb:*\"],\n    resources=[\"*\"]\n))",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.DynamoDB;\nTable table;\n\n\nIdentityPool identityPool = new IdentityPool(this, \"myIdentityPool\");\n\n// Grant permissions to authenticated users\ntable.GrantReadWriteData(identityPool.AuthenticatedRole);\n// Grant permissions to unauthenticated guest users\ntable.GrantReadData(identityPool.UnauthenticatedRole);\n\n//Or add policy statements straight to the role\nidentityPool.AuthenticatedRole.AddToPrincipalPolicy(new PolicyStatement(new PolicyStatementProps {\n    Effect = Effect.ALLOW,\n    Actions = new [] { \"dynamodb:*\" },\n    Resources = new [] { \"*\" }\n}));",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.dynamodb.*;\nTable table;\n\n\nIdentityPool identityPool = new IdentityPool(this, \"myIdentityPool\");\n\n// Grant permissions to authenticated users\ntable.grantReadWriteData(identityPool.getAuthenticatedRole());\n// Grant permissions to unauthenticated guest users\ntable.grantReadData(identityPool.getUnauthenticatedRole());\n\n//Or add policy statements straight to the role\nidentityPool.authenticatedRole.addToPrincipalPolicy(PolicyStatement.Builder.create()\n        .effect(Effect.ALLOW)\n        .actions(List.of(\"dynamodb:*\"))\n        .resources(List.of(\"*\"))\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "import dynamodb \"github.com/aws-samples/dummy/awscdkawsdynamodb\"\nvar table table\n\n\nidentityPool := awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myIdentityPool\"))\n\n// Grant permissions to authenticated users\ntable.grantReadWriteData(identityPool.authenticatedRole)\n// Grant permissions to unauthenticated guest users\ntable.grantReadData(identityPool.unauthenticatedRole)\n\n//Or add policy statements straight to the role\nidentityPool.authenticatedRole.addToPrincipalPolicy(iam.NewPolicyStatement(&policyStatementProps{\n\teffect: iam.effect_ALLOW,\n\tactions: []*string{\n\t\tjsii.String(\"dynamodb:*\"),\n\t},\n\tresources: []*string{\n\t\tjsii.String(\"*\"),\n\t},\n}))",
          "version": "1"
        },
        "$": {
          "source": "import * as dynamodb from '@aws-cdk/aws-dynamodb';\n\nconst identityPool = new IdentityPool(this, 'myIdentityPool');\ndeclare const table: dynamodb.Table;\n\n// Grant permissions to authenticated users\ntable.grantReadWriteData(identityPool.authenticatedRole);\n// Grant permissions to unauthenticated guest users\ntable.grantReadData(identityPool.unauthenticatedRole);\n\n//Or add policy statements straight to the role\nidentityPool.authenticatedRole.addToPrincipalPolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['dynamodb:*'],\n  resources: ['*'],\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 79
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#authenticatedRole",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#unauthenticatedRole",
        "@aws-cdk/aws-iam.Effect",
        "@aws-cdk/aws-iam.Effect#ALLOW",
        "@aws-cdk/aws-iam.IGrantable",
        "@aws-cdk/aws-iam.IPrincipal#addToPrincipalPolicy",
        "@aws-cdk/aws-iam.PolicyStatement",
        "@aws-cdk/aws-iam.PolicyStatementProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport * as dynamodb from '@aws-cdk/aws-dynamodb';\ndeclare const table: dynamodb.Table;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nconst identityPool = new IdentityPool(this, 'myIdentityPool');\n\n// Grant permissions to authenticated users\ntable.grantReadWriteData(identityPool.authenticatedRole);\n// Grant permissions to unauthenticated guest users\ntable.grantReadData(identityPool.unauthenticatedRole);\n\n//Or add policy statements straight to the role\nidentityPool.authenticatedRole.addToPrincipalPolicy(new iam.PolicyStatement({\n  effect: iam.Effect.ALLOW,\n  actions: ['dynamodb:*'],\n  resources: ['*'],\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 25,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 2,
        "193": 1,
        "194": 9,
        "196": 3,
        "197": 2,
        "225": 2,
        "226": 3,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "b73dace910325a9a75589814d5df3a6d7802a49b8e48698b5f75c6b25212f6f6"
    },
    "856d3394395cfce7dcbafa954c4a9a46baa9495ab735c4f44b22e4ddf93c7e0c": {
      "translations": {
        "python": {
          "source": "stack = Stack()\nauthenticated_role = iam.Role(self, \"authRole\",\n    assumed_by=iam.ServicePrincipal(\"service.amazonaws.com\")\n)\nunauthenticated_role = iam.Role(self, \"unauthRole\",\n    assumed_by=iam.ServicePrincipal(\"service.amazonaws.com\")\n)\nidentity_pool = IdentityPool(self, \"TestIdentityPoolActions\",\n    authenticated_role=authenticated_role,\n    unauthenticated_role=unauthenticated_role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "Stack stack = new Stack();\nRole authenticatedRole = new Role(this, \"authRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"service.amazonaws.com\")\n});\nRole unauthenticatedRole = new Role(this, \"unauthRole\", new RoleProps {\n    AssumedBy = new ServicePrincipal(\"service.amazonaws.com\")\n});\nIdentityPool identityPool = new IdentityPool(this, \"TestIdentityPoolActions\", new IdentityPoolProps {\n    AuthenticatedRole = authenticatedRole,\n    UnauthenticatedRole = unauthenticatedRole\n});",
          "version": "1"
        },
        "java": {
          "source": "Stack stack = new Stack();\nRole authenticatedRole = Role.Builder.create(this, \"authRole\")\n        .assumedBy(new ServicePrincipal(\"service.amazonaws.com\"))\n        .build();\nRole unauthenticatedRole = Role.Builder.create(this, \"unauthRole\")\n        .assumedBy(new ServicePrincipal(\"service.amazonaws.com\"))\n        .build();\nIdentityPool identityPool = IdentityPool.Builder.create(this, \"TestIdentityPoolActions\")\n        .authenticatedRole(authenticatedRole)\n        .unauthenticatedRole(unauthenticatedRole)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "stack := awscdkcore.Newstack()\nauthenticatedRole := iam.NewRole(this, jsii.String(\"authRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"service.amazonaws.com\")),\n})\nunauthenticatedRole := iam.NewRole(this, jsii.String(\"unauthRole\"), &roleProps{\n\tassumedBy: iam.NewServicePrincipal(jsii.String(\"service.amazonaws.com\")),\n})\nidentityPool := awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"TestIdentityPoolActions\"), &identityPoolProps{\n\tauthenticatedRole: authenticatedRole,\n\tunauthenticatedRole: unauthenticatedRole,\n})",
          "version": "1"
        },
        "$": {
          "source": "const stack = new Stack();\nconst authenticatedRole = new iam.Role(this, 'authRole', {\n  assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),\n});\nconst unauthenticatedRole = new iam.Role(this, 'unauthRole', {\n  assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),\n});\nconst identityPool = new IdentityPool(this, 'TestIdentityPoolActions', {\n  authenticatedRole,\n  unauthenticatedRole,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 100
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-iam.IPrincipal",
        "@aws-cdk/aws-iam.IRole",
        "@aws-cdk/aws-iam.Role",
        "@aws-cdk/aws-iam.RoleProps",
        "@aws-cdk/aws-iam.ServicePrincipal",
        "@aws-cdk/core.Stack",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst stack = new Stack();\nconst authenticatedRole = new iam.Role(this, 'authRole', {\n  assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),\n});\nconst unauthenticatedRole = new iam.Role(this, 'unauthRole', {\n  assumedBy: new iam.ServicePrincipal('service.amazonaws.com'),\n});\nconst identityPool = new IdentityPool(this, 'TestIdentityPoolActions', {\n  authenticatedRole,\n  unauthenticatedRole,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 18,
        "104": 3,
        "193": 3,
        "194": 4,
        "197": 6,
        "225": 4,
        "242": 4,
        "243": 4,
        "281": 2,
        "282": 2
      },
      "fqnsFingerprint": "b1d0d6b2ea6a4ece46f80646d108e8393f5eff1b527a1e3bdde57ecd3fbb4ff1"
    },
    "50bf5587bdf7ed203f8e80c7fcd24cb761ed4a6a2ebc349949f08085e143c933": {
      "translations": {
        "python": {
          "source": "user_pool = cognito.UserPool(self, \"Pool\")\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        user_pools=[UserPoolAuthenticationProvider(user_pool=user_pool)]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "UserPool userPool = new UserPool(this, \"Pool\");\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        UserPools = new [] { new UserPoolAuthenticationProvider(new UserPoolAuthenticationProviderProps { UserPool = userPool }) }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "UserPool userPool = new UserPool(this, \"Pool\");\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .userPools(List.of(UserPoolAuthenticationProvider.Builder.create().userPool(userPool).build()))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "userPool := cognito.NewUserPool(this, jsii.String(\"Pool\"))\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tuserPools: []iUserPoolAuthenticationProvider{\n\t\t\t*awscdkawscognitoidentitypool.NewUserPoolAuthenticationProvider(&userPoolAuthenticationProviderProps{\n\t\t\t\tuserPool: userPool,\n\t\t\t}),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "const userPool = new cognito.UserPool(this, 'Pool');\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    userPools: [new UserPoolAuthenticationProvider({ userPool })],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 129
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nconst userPool = new cognito.UserPool(this, 'Pool');\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    userPools: [new UserPoolAuthenticationProvider({ userPool })],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 9,
        "104": 2,
        "192": 1,
        "193": 3,
        "194": 1,
        "197": 3,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 3,
        "282": 1
      },
      "fqnsFingerprint": "8235e91eb49f8da432435769b6153101f88707a2dfa505b2bd811256bee3347a"
    },
    "1e70f2d968a4fab4c1522165ab853c45275551b6c7ae20b707d7328a95a4c229": {
      "translations": {
        "python": {
          "source": "# identity_pool: IdentityPool\n\nuser_pool = cognito.UserPool(self, \"Pool\")\nuser_pool_client = identity_pool.add_user_pool_authentication(UserPoolAuthenticationProvider(\n    user_pool=user_pool\n))",
          "version": "2"
        },
        "csharp": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nvoid userPoolClient = identityPool.AddUserPoolAuthentication(new UserPoolAuthenticationProvider(new UserPoolAuthenticationProviderProps {\n    UserPool = userPool\n}));",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nvoid userPoolClient = identityPool.addUserPoolAuthentication(UserPoolAuthenticationProvider.Builder.create()\n        .userPool(userPool)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var identityPool identityPool\n\nuserPool := cognito.NewUserPool(this, jsii.String(\"Pool\"))\nuserPoolClient := identityPool.addUserPoolAuthentication(awscdkawscognitoidentitypool.NewUserPoolAuthenticationProvider(&userPoolAuthenticationProviderProps{\n\tuserPool: userPool,\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nconst userPoolClient = identityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 143
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#addUserPoolAuthentication",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const identityPool: IdentityPool;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst userPool = new cognito.UserPool(this, 'Pool');\nconst userPoolClient = identityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 3,
        "242": 3,
        "243": 3,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c7a61aa95cabbcce97470ddea14c62d4dfcd79996e7a5db90b8e3b0855a76e0"
    },
    "cfc8f743eee4fdfdf0ae9a9f7952de1204df9f534a098266dac0ffbbfebf67e0": {
      "translations": {
        "python": {
          "source": "# identity_pool: IdentityPool\n\nuser_pool = cognito.UserPool(self, \"Pool\")\nidentity_pool.add_user_pool_authentication(UserPoolAuthenticationProvider(\n    user_pool=user_pool,\n    disable_server_side_token_check=True\n))",
          "version": "2"
        },
        "csharp": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nidentityPool.AddUserPoolAuthentication(new UserPoolAuthenticationProvider(new UserPoolAuthenticationProviderProps {\n    UserPool = userPool,\n    DisableServerSideTokenCheck = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nidentityPool.addUserPoolAuthentication(UserPoolAuthenticationProvider.Builder.create()\n        .userPool(userPool)\n        .disableServerSideTokenCheck(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var identityPool identityPool\n\nuserPool := cognito.NewUserPool(this, jsii.String(\"Pool\"))\nidentityPool.addUserPoolAuthentication(awscdkawscognitoidentitypool.NewUserPoolAuthenticationProvider(&userPoolAuthenticationProviderProps{\n\tuserPool: userPool,\n\tdisableServerSideTokenCheck: jsii.Boolean(true),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 163
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#addUserPoolAuthentication",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const identityPool: IdentityPool;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "106": 1,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c7a61aa95cabbcce97470ddea14c62d4dfcd79996e7a5db90b8e3b0855a76e0"
    },
    "41ed6cb1226cae10c32fd4c44bcc945f24421787b0482c9feaa3869e327f5b72": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        amazon=IdentityPoolAmazonLoginProvider(\n            app_id=\"amzn1.application.12312k3j234j13rjiwuenf\"\n        ),\n        facebook=IdentityPoolFacebookLoginProvider(\n            app_id=\"1234567890123\"\n        ),\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        apple=IdentityPoolAppleLoginProvider(\n            services_id=\"com.myappleapp.auth\"\n        ),\n        twitter=IdentityPoolTwitterLoginProvider(\n            consumer_key=\"my-twitter-id\",\n            consumer_secret=\"my-twitter-secret\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Amazon = new IdentityPoolAmazonLoginProvider {\n            AppId = \"amzn1.application.12312k3j234j13rjiwuenf\"\n        },\n        Facebook = new IdentityPoolFacebookLoginProvider {\n            AppId = \"1234567890123\"\n        },\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        Apple = new IdentityPoolAppleLoginProvider {\n            ServicesId = \"com.myappleapp.auth\"\n        },\n        Twitter = new IdentityPoolTwitterLoginProvider {\n            ConsumerKey = \"my-twitter-id\",\n            ConsumerSecret = \"my-twitter-secret\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .amazon(IdentityPoolAmazonLoginProvider.builder()\n                        .appId(\"amzn1.application.12312k3j234j13rjiwuenf\")\n                        .build())\n                .facebook(IdentityPoolFacebookLoginProvider.builder()\n                        .appId(\"1234567890123\")\n                        .build())\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .apple(IdentityPoolAppleLoginProvider.builder()\n                        .servicesId(\"com.myappleapp.auth\")\n                        .build())\n                .twitter(IdentityPoolTwitterLoginProvider.builder()\n                        .consumerKey(\"my-twitter-id\")\n                        .consumerSecret(\"my-twitter-secret\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tamazon: &identityPoolAmazonLoginProvider{\n\t\t\tappId: jsii.String(\"amzn1.application.12312k3j234j13rjiwuenf\"),\n\t\t},\n\t\tfacebook: &identityPoolFacebookLoginProvider{\n\t\t\tappId: jsii.String(\"1234567890123\"),\n\t\t},\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\tapple: &identityPoolAppleLoginProvider{\n\t\t\tservicesId: jsii.String(\"com.myappleapp.auth\"),\n\t\t},\n\t\ttwitter: &identityPoolTwitterLoginProvider{\n\t\t\tconsumerKey: jsii.String(\"my-twitter-id\"),\n\t\t\tconsumerSecret: jsii.String(\"my-twitter-secret\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 177
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "193": 7,
        "197": 1,
        "226": 1,
        "281": 13
      },
      "fqnsFingerprint": "74be512aa214d879c893018b788f1c207e1acd775bb40df721f34e8c46fc05e0"
    },
    "ff6f49b1c45a0efd723901613507881ec5e9e4a4316856467f55f7236094512f": {
      "translations": {
        "python": {
          "source": "# open_id_connect_provider: iam.OpenIdConnectProvider\n# saml_provider: iam.SamlProvider\n\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        open_id_connect_providers=[open_id_connect_provider],\n        saml_providers=[saml_provider]\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\nSamlProvider samlProvider;\n\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        OpenIdConnectProviders = new [] { openIdConnectProvider },\n        SamlProviders = new [] { samlProvider }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\nSamlProvider samlProvider;\n\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .openIdConnectProviders(List.of(openIdConnectProvider))\n                .samlProviders(List.of(samlProvider))\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var openIdConnectProvider openIdConnectProvider\nvar samlProvider samlProvider\n\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\topenIdConnectProviders: []iOpenIdConnectProvider{\n\t\t\topenIdConnectProvider,\n\t\t},\n\t\tsamlProviders: []iSamlProvider{\n\t\t\tsamlProvider,\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\ndeclare const samlProvider: iam.SamlProvider;\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    openIdConnectProviders: [openIdConnectProvider],\n    samlProviders: [samlProvider],\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 215
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\ndeclare const samlProvider: iam.SamlProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    openIdConnectProviders: [openIdConnectProvider],\n    samlProviders: [samlProvider],\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 13,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "4247777029300e7deac9b8a659602af2404b5481e21bc1e3b375bff8a8d90d0e"
    },
    "5cb756d49fe5e3e7845648b4b538c79f574eaa0ea5c226e14905dd2c94d5c520": {
      "translations": {
        "python": {
          "source": "# open_id_connect_provider: iam.OpenIdConnectProvider\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        open_id_connect_providers=[open_id_connect_provider],\n        custom_provider=\"my-custom-provider.example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        OpenIdConnectProviders = new [] { openIdConnectProvider },\n        CustomProvider = \"my-custom-provider.example.com\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .openIdConnectProviders(List.of(openIdConnectProvider))\n                .customProvider(\"my-custom-provider.example.com\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var openIdConnectProvider openIdConnectProvider\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\topenIdConnectProviders: []iOpenIdConnectProvider{\n\t\t\topenIdConnectProvider,\n\t\t},\n\t\tcustomProvider: jsii.String(\"my-custom-provider.example.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 237
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e8a83120c3eaee4a303972bfac403d1bebb0cdd8150efa9ba3eea833b1d4c6b5"
    },
    "cdf14e1c8f7c20bf70a10fccd88d3a6865852230cb1bc6d5e45e2bc4656caa03": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolProviderUrl\n\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    role_mappings=[IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.AMAZON,\n        use_token=True\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.AMAZON,\n        UseToken = true\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolProviderUrl;\n\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.AMAZON)\n                .useToken(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl_AMAZON(),\n\t\t\tuseToken: jsii.Boolean(true),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    useToken: true,\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 261
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#AMAZON",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    useToken: true,\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "a7350b6e4d9d3bb920db4159df6656e164b7e649e457e873d437d22fa992ec3e"
    },
    "44cbe7687a581a1ee605418e1ea5a8e12f0cb8719c3258ea344c9db4f4ae94fb": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolProviderUrl, RoleMappingMatchType\n\n# admin_role: iam.Role\n# non_admin_role: iam.Role\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    # Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n    role_mappings=[IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.AMAZON,\n        rules=[RoleMappingRule(\n            claim=\"custom:admin\",\n            claim_value=\"admin\",\n            mapped_role=admin_role\n        ), RoleMappingRule(\n            claim=\"custom:admin\",\n            claim_value=\"admin\",\n            match_type=RoleMappingMatchType.NOTEQUAL,\n            mapped_role=non_admin_role\n        )\n        ]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\nRole adminRole;\nRole nonAdminRole;\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.AMAZON,\n        Rules = new [] { new RoleMappingRule {\n            Claim = \"custom:admin\",\n            ClaimValue = \"admin\",\n            MappedRole = adminRole\n        }, new RoleMappingRule {\n            Claim = \"custom:admin\",\n            ClaimValue = \"admin\",\n            MatchType = RoleMappingMatchType.NOTEQUAL,\n            MappedRole = nonAdminRole\n        } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolProviderUrl;\nimport software.amazon.awscdk.services.cognito.identitypool.RoleMappingMatchType;\n\nRole adminRole;\nRole nonAdminRole;\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.AMAZON)\n                .rules(List.of(RoleMappingRule.builder()\n                        .claim(\"custom:admin\")\n                        .claimValue(\"admin\")\n                        .mappedRole(adminRole)\n                        .build(), RoleMappingRule.builder()\n                        .claim(\"custom:admin\")\n                        .claimValue(\"admin\")\n                        .matchType(RoleMappingMatchType.NOTEQUAL)\n                        .mappedRole(nonAdminRole)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nvar adminRole role\nvar nonAdminRole role\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\t// Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl_AMAZON(),\n\t\t\trules: []roleMappingRule{\n\t\t\t\t&roleMappingRule{\n\t\t\t\t\tclaim: jsii.String(\"custom:admin\"),\n\t\t\t\t\tclaimValue: jsii.String(\"admin\"),\n\t\t\t\t\tmappedRole: adminRole,\n\t\t\t\t},\n\t\t\t\t&roleMappingRule{\n\t\t\t\t\tclaim: jsii.String(\"custom:admin\"),\n\t\t\t\t\tclaimValue: jsii.String(\"admin\"),\n\t\t\t\t\tmatchType: *awscdkawscognitoidentitypool.RoleMappingMatchType_NOTEQUAL,\n\t\t\t\t\tmappedRole: nonAdminRole,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolProviderUrl, RoleMappingMatchType } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const adminRole: iam.Role;\ndeclare const nonAdminRole: iam.Role;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    rules: [\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        mappedRole: adminRole,\n      },\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        matchType: RoleMappingMatchType.NOTEQUAL,\n        mappedRole: nonAdminRole,\n      }\n    ],\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 275
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#AMAZON",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType#NOTEQUAL",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolProviderUrl, RoleMappingMatchType } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const adminRole: iam.Role;\ndeclare const nonAdminRole: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    rules: [\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        mappedRole: adminRole,\n      },\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        matchType: RoleMappingMatchType.NOTEQUAL,\n        mappedRole: nonAdminRole,\n      }\n    ],\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 4,
        "194": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "49c1a808d0fa11d4f3cde0180061732e317afa86873b1e359ee6da76943a4628"
    },
    "53c79b27548367955a885f7ec65d27481f00cbed643f582748c95cec30b1adb6": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolRoleMapping\n\n# identity_pool: IdentityPool\n# my_added_role_mapping1: IdentityPoolRoleMapping\n# my_added_role_mapping2: IdentityPoolRoleMapping\n# my_added_role_mapping3: IdentityPoolRoleMapping\n\n\nidentity_pool.add_role_mappings(my_added_role_mapping1, my_added_role_mapping2, my_added_role_mapping3)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\nIdentityPool identityPool;\nIdentityPoolRoleMapping myAddedRoleMapping1;\nIdentityPoolRoleMapping myAddedRoleMapping2;\nIdentityPoolRoleMapping myAddedRoleMapping3;\n\n\nidentityPool.AddRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolRoleMapping;\n\nIdentityPool identityPool;\nIdentityPoolRoleMapping myAddedRoleMapping1;\nIdentityPoolRoleMapping myAddedRoleMapping2;\nIdentityPoolRoleMapping myAddedRoleMapping3;\n\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nvar identityPool identityPool\nvar myAddedRoleMapping1 identityPoolRoleMapping\nvar myAddedRoleMapping2 identityPoolRoleMapping\nvar myAddedRoleMapping3 identityPoolRoleMapping\n\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3)",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolRoleMapping } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const identityPool: IdentityPool;\ndeclare const myAddedRoleMapping1: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping2: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping3: IdentityPoolRoleMapping;\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 304
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#addRoleMappings",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolRoleMapping } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const identityPool: IdentityPool;\ndeclare const myAddedRoleMapping1: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping2: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping3: IdentityPoolRoleMapping;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 4,
        "169": 4,
        "194": 1,
        "196": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "290": 1
      },
      "fqnsFingerprint": "e7c0e102581257984b8d94392c524109d87381c1d0e4ab9fa46ad47750eda5fa"
    },
    "a32a0e0ba70b515dcc3a3e5743f0338dc9f3bbba24fee37c5723a6c72b86ebfd": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolProviderUrl\n\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    role_mappings=[IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.FACEBOOK,\n        use_token=True\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.FACEBOOK,\n        UseToken = true\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolProviderUrl;\n\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.FACEBOOK)\n                .useToken(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl_FACEBOOK(),\n\t\t\tuseToken: jsii.Boolean(true),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.FACEBOOK,\n    useToken: true,\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 320
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#FACEBOOK",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.FACEBOOK,\n    useToken: true,\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 3,
        "75": 8,
        "104": 1,
        "106": 1,
        "192": 1,
        "193": 2,
        "194": 1,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "31ed6a0c1369e1036b550754ec480c4e1e599bee88f2e5e39808ffffff846293"
    },
    "4be49005fbdba8cc9a1a17457ae6ad8c19cc1e8e26eef8b600566b5944ac19f1": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolProviderUrl\n\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    role_mappings=[IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.user_pool(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\"),\n        use_token=True\n    ), IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.custom(\"my-custom-provider.com\"),\n        use_token=True\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.UserPool(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\"),\n        UseToken = true\n    }, new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.Custom(\"my-custom-provider.com\"),\n        UseToken = true\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolProviderUrl;\n\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.userPool(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\"))\n                .useToken(true)\n                .build(), IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.custom(\"my-custom-provider.com\"))\n                .useToken(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl.userPool(jsii.String(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\")),\n\t\t\tuseToken: jsii.Boolean(true),\n\t\t},\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl.custom(jsii.String(\"my-custom-provider.com\")),\n\t\t\tuseToken: jsii.Boolean(true),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [\n    {\n      providerUrl: IdentityPoolProviderUrl.userPool('cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id'),\n      useToken: true,\n    },\n    {\n      providerUrl: IdentityPoolProviderUrl.custom('my-custom-provider.com'),\n      useToken: true,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 334
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#custom",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#userPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [\n    {\n      providerUrl: IdentityPoolProviderUrl.userPool('cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id'),\n      useToken: true,\n    },\n    {\n      providerUrl: IdentityPoolProviderUrl.custom('my-custom-provider.com'),\n      useToken: true,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 2,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "10c7c27c698516220f3446bb55ab988b819f651852a5a0961b2a54eb921f6242"
    },
    "467e8ad4e01d168a37ff76028180c86d9785a422509ccfa77055bf33ed880b88": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    allow_classic_flow=True\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AllowClassicFlow = true\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .allowClassicFlow(true)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tallowClassicFlow: jsii.Boolean(true),\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  allowClassicFlow: true,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 359
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  allowClassicFlow: true,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 2,
        "75": 3,
        "104": 1,
        "106": 1,
        "193": 1,
        "197": 1,
        "226": 1,
        "281": 2
      },
      "fqnsFingerprint": "8d0dbf85d6e336ddc26868f27beb7bfd7e03e8b29d32f213586f3111b6934de0"
    },
    "675e5d27c3f54659c53ae8bbc78d6cbae7c36696ba84cd3791ab5a7b5eb41a0f": {
      "translations": {
        "python": {
          "source": "IdentityPool.from_identity_pool_id(self, \"my-imported-identity-pool\", \"us-east-1:dj2823ryiwuhef937\")\nIdentityPool.from_identity_pool_arn(self, \"my-imported-identity-pool\", \"arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937\")",
          "version": "2"
        },
        "csharp": {
          "source": "IdentityPool.FromIdentityPoolId(this, \"my-imported-identity-pool\", \"us-east-1:dj2823ryiwuhef937\");\nIdentityPool.FromIdentityPoolArn(this, \"my-imported-identity-pool\", \"arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937\");",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.fromIdentityPoolId(this, \"my-imported-identity-pool\", \"us-east-1:dj2823ryiwuhef937\");\nIdentityPool.fromIdentityPoolArn(this, \"my-imported-identity-pool\", \"arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937\");",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.IdentityPool.fromIdentityPoolId(this, jsii.String(\"my-imported-identity-pool\"), jsii.String(\"us-east-1:dj2823ryiwuhef937\"))\nawscdkawscognitoidentitypool.IdentityPool.fromIdentityPoolArn(this, jsii.String(\"my-imported-identity-pool\"), jsii.String(\"arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937\"))",
          "version": "1"
        },
        "$": {
          "source": "IdentityPool.fromIdentityPoolId(this, 'my-imported-identity-pool',\n  'us-east-1:dj2823ryiwuhef937');\nIdentityPool.fromIdentityPoolArn(this, 'my-imported-identity-pool',\n  'arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937');",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "moduleReadme",
          "moduleFqn": "@aws-cdk/aws-cognito-identitypool"
        },
        "field": {
          "field": "markdown",
          "line": 377
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#fromIdentityPoolArn",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#fromIdentityPoolId",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nIdentityPool.fromIdentityPoolId(this, 'my-imported-identity-pool',\n  'us-east-1:dj2823ryiwuhef937');\nIdentityPool.fromIdentityPoolArn(this, 'my-imported-identity-pool',\n  'arn:aws:cognito-identity:us-east-1:123456789012:identitypool/us-east-1:dj2823ryiwuhef937');\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 4,
        "104": 2,
        "194": 2,
        "196": 2,
        "226": 2
      },
      "fqnsFingerprint": "9d95ab293e32efdbdcfddc1e3c53dff11c243dccd5ea8cb7603cf8873219b0ae"
    },
    "f4799a372a4e63962c4392a6b7522944c3bc3aad2a123ef11dcd34179284a842": {
      "translations": {
        "python": {
          "source": "# open_id_connect_provider: iam.OpenIdConnectProvider\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        open_id_connect_providers=[open_id_connect_provider],\n        custom_provider=\"my-custom-provider.example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        OpenIdConnectProviders = new [] { openIdConnectProvider },\n        CustomProvider = \"my-custom-provider.example.com\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .openIdConnectProviders(List.of(openIdConnectProvider))\n                .customProvider(\"my-custom-provider.example.com\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var openIdConnectProvider openIdConnectProvider\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\topenIdConnectProviders: []iOpenIdConnectProvider{\n\t\t\topenIdConnectProvider,\n\t\t},\n\t\tcustomProvider: jsii.String(\"my-custom-provider.example.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPool"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e8a83120c3eaee4a303972bfac403d1bebb0cdd8150efa9ba3eea833b1d4c6b5"
    },
    "b8736749f2a3188660e23ed77d4e39c64ef45aa6f6eb773e6ee86aa112307ae3": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        amazon=IdentityPoolAmazonLoginProvider(\n            app_id=\"amzn1.application.12312k3j234j13rjiwuenf\"\n        ),\n        facebook=IdentityPoolFacebookLoginProvider(\n            app_id=\"1234567890123\"\n        ),\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        apple=IdentityPoolAppleLoginProvider(\n            services_id=\"com.myappleapp.auth\"\n        ),\n        twitter=IdentityPoolTwitterLoginProvider(\n            consumer_key=\"my-twitter-id\",\n            consumer_secret=\"my-twitter-secret\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Amazon = new IdentityPoolAmazonLoginProvider {\n            AppId = \"amzn1.application.12312k3j234j13rjiwuenf\"\n        },\n        Facebook = new IdentityPoolFacebookLoginProvider {\n            AppId = \"1234567890123\"\n        },\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        Apple = new IdentityPoolAppleLoginProvider {\n            ServicesId = \"com.myappleapp.auth\"\n        },\n        Twitter = new IdentityPoolTwitterLoginProvider {\n            ConsumerKey = \"my-twitter-id\",\n            ConsumerSecret = \"my-twitter-secret\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .amazon(IdentityPoolAmazonLoginProvider.builder()\n                        .appId(\"amzn1.application.12312k3j234j13rjiwuenf\")\n                        .build())\n                .facebook(IdentityPoolFacebookLoginProvider.builder()\n                        .appId(\"1234567890123\")\n                        .build())\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .apple(IdentityPoolAppleLoginProvider.builder()\n                        .servicesId(\"com.myappleapp.auth\")\n                        .build())\n                .twitter(IdentityPoolTwitterLoginProvider.builder()\n                        .consumerKey(\"my-twitter-id\")\n                        .consumerSecret(\"my-twitter-secret\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tamazon: &identityPoolAmazonLoginProvider{\n\t\t\tappId: jsii.String(\"amzn1.application.12312k3j234j13rjiwuenf\"),\n\t\t},\n\t\tfacebook: &identityPoolFacebookLoginProvider{\n\t\t\tappId: jsii.String(\"1234567890123\"),\n\t\t},\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\tapple: &identityPoolAppleLoginProvider{\n\t\t\tservicesId: jsii.String(\"com.myappleapp.auth\"),\n\t\t},\n\t\ttwitter: &identityPoolTwitterLoginProvider{\n\t\t\tconsumerKey: jsii.String(\"my-twitter-id\"),\n\t\t\tconsumerSecret: jsii.String(\"my-twitter-secret\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "193": 7,
        "197": 1,
        "226": 1,
        "281": 13
      },
      "fqnsFingerprint": "74be512aa214d879c893018b788f1c207e1acd775bb40df721f34e8c46fc05e0"
    },
    "e457dad5f8e68d462c191200ab09e81e2577ff07f2e1d5a15bfa91657f7c025e": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        amazon=IdentityPoolAmazonLoginProvider(\n            app_id=\"amzn1.application.12312k3j234j13rjiwuenf\"\n        ),\n        facebook=IdentityPoolFacebookLoginProvider(\n            app_id=\"1234567890123\"\n        ),\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        apple=IdentityPoolAppleLoginProvider(\n            services_id=\"com.myappleapp.auth\"\n        ),\n        twitter=IdentityPoolTwitterLoginProvider(\n            consumer_key=\"my-twitter-id\",\n            consumer_secret=\"my-twitter-secret\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Amazon = new IdentityPoolAmazonLoginProvider {\n            AppId = \"amzn1.application.12312k3j234j13rjiwuenf\"\n        },\n        Facebook = new IdentityPoolFacebookLoginProvider {\n            AppId = \"1234567890123\"\n        },\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        Apple = new IdentityPoolAppleLoginProvider {\n            ServicesId = \"com.myappleapp.auth\"\n        },\n        Twitter = new IdentityPoolTwitterLoginProvider {\n            ConsumerKey = \"my-twitter-id\",\n            ConsumerSecret = \"my-twitter-secret\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .amazon(IdentityPoolAmazonLoginProvider.builder()\n                        .appId(\"amzn1.application.12312k3j234j13rjiwuenf\")\n                        .build())\n                .facebook(IdentityPoolFacebookLoginProvider.builder()\n                        .appId(\"1234567890123\")\n                        .build())\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .apple(IdentityPoolAppleLoginProvider.builder()\n                        .servicesId(\"com.myappleapp.auth\")\n                        .build())\n                .twitter(IdentityPoolTwitterLoginProvider.builder()\n                        .consumerKey(\"my-twitter-id\")\n                        .consumerSecret(\"my-twitter-secret\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tamazon: &identityPoolAmazonLoginProvider{\n\t\t\tappId: jsii.String(\"amzn1.application.12312k3j234j13rjiwuenf\"),\n\t\t},\n\t\tfacebook: &identityPoolFacebookLoginProvider{\n\t\t\tappId: jsii.String(\"1234567890123\"),\n\t\t},\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\tapple: &identityPoolAppleLoginProvider{\n\t\t\tservicesId: jsii.String(\"com.myappleapp.auth\"),\n\t\t},\n\t\ttwitter: &identityPoolTwitterLoginProvider{\n\t\t\tconsumerKey: jsii.String(\"my-twitter-id\"),\n\t\t\tconsumerSecret: jsii.String(\"my-twitter-secret\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "193": 7,
        "197": 1,
        "226": 1,
        "281": 13
      },
      "fqnsFingerprint": "74be512aa214d879c893018b788f1c207e1acd775bb40df721f34e8c46fc05e0"
    },
    "e674e4332387b0142e808e48ef3a3b6276e2bb3634c32c91f914a507da19e700": {
      "translations": {
        "python": {
          "source": "# open_id_connect_provider: iam.OpenIdConnectProvider\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        open_id_connect_providers=[open_id_connect_provider],\n        custom_provider=\"my-custom-provider.example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        OpenIdConnectProviders = new [] { openIdConnectProvider },\n        CustomProvider = \"my-custom-provider.example.com\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .openIdConnectProviders(List.of(openIdConnectProvider))\n                .customProvider(\"my-custom-provider.example.com\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var openIdConnectProvider openIdConnectProvider\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\topenIdConnectProviders: []iOpenIdConnectProvider{\n\t\t\topenIdConnectProvider,\n\t\t},\n\t\tcustomProvider: jsii.String(\"my-custom-provider.example.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e8a83120c3eaee4a303972bfac403d1bebb0cdd8150efa9ba3eea833b1d4c6b5"
    },
    "a4a259d969e6f533b11f793f616eee6378b9a54837d75836334e1847d7455496": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\n\nidentity_pool_digits_login_provider = cognito_identitypool.IdentityPoolDigitsLoginProvider(\n    consumer_key=\"consumerKey\",\n    consumer_secret=\"consumerSecret\"\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\n\nIdentityPoolDigitsLoginProvider identityPoolDigitsLoginProvider = new IdentityPoolDigitsLoginProvider {\n    ConsumerKey = \"consumerKey\",\n    ConsumerSecret = \"consumerSecret\"\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\n\nIdentityPoolDigitsLoginProvider identityPoolDigitsLoginProvider = IdentityPoolDigitsLoginProvider.builder()\n        .consumerKey(\"consumerKey\")\n        .consumerSecret(\"consumerSecret\")\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nidentityPoolDigitsLoginProvider := &identityPoolDigitsLoginProvider{\n\tconsumerKey: jsii.String(\"consumerKey\"),\n\tconsumerSecret: jsii.String(\"consumerSecret\"),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst identityPoolDigitsLoginProvider: cognito_identitypool.IdentityPoolDigitsLoginProvider = {\n  consumerKey: 'consumerKey',\n  consumerSecret: 'consumerSecret',\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolDigitsLoginProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolDigitsLoginProvider"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst identityPoolDigitsLoginProvider: cognito_identitypool.IdentityPoolDigitsLoginProvider = {\n  consumerKey: 'consumerKey',\n  consumerSecret: 'consumerSecret',\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 6,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 2,
        "290": 1
      },
      "fqnsFingerprint": "f8653294c56c95f8bc62ef211d0ae1fabd217dd8485ef6eb9120bdd18147e1b7"
    },
    "9a9d7585b26d4cfdbeaba61f534747b0b45271031cfcbdff6b82f6c1a08cb2db": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        amazon=IdentityPoolAmazonLoginProvider(\n            app_id=\"amzn1.application.12312k3j234j13rjiwuenf\"\n        ),\n        facebook=IdentityPoolFacebookLoginProvider(\n            app_id=\"1234567890123\"\n        ),\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        apple=IdentityPoolAppleLoginProvider(\n            services_id=\"com.myappleapp.auth\"\n        ),\n        twitter=IdentityPoolTwitterLoginProvider(\n            consumer_key=\"my-twitter-id\",\n            consumer_secret=\"my-twitter-secret\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Amazon = new IdentityPoolAmazonLoginProvider {\n            AppId = \"amzn1.application.12312k3j234j13rjiwuenf\"\n        },\n        Facebook = new IdentityPoolFacebookLoginProvider {\n            AppId = \"1234567890123\"\n        },\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        Apple = new IdentityPoolAppleLoginProvider {\n            ServicesId = \"com.myappleapp.auth\"\n        },\n        Twitter = new IdentityPoolTwitterLoginProvider {\n            ConsumerKey = \"my-twitter-id\",\n            ConsumerSecret = \"my-twitter-secret\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .amazon(IdentityPoolAmazonLoginProvider.builder()\n                        .appId(\"amzn1.application.12312k3j234j13rjiwuenf\")\n                        .build())\n                .facebook(IdentityPoolFacebookLoginProvider.builder()\n                        .appId(\"1234567890123\")\n                        .build())\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .apple(IdentityPoolAppleLoginProvider.builder()\n                        .servicesId(\"com.myappleapp.auth\")\n                        .build())\n                .twitter(IdentityPoolTwitterLoginProvider.builder()\n                        .consumerKey(\"my-twitter-id\")\n                        .consumerSecret(\"my-twitter-secret\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tamazon: &identityPoolAmazonLoginProvider{\n\t\t\tappId: jsii.String(\"amzn1.application.12312k3j234j13rjiwuenf\"),\n\t\t},\n\t\tfacebook: &identityPoolFacebookLoginProvider{\n\t\t\tappId: jsii.String(\"1234567890123\"),\n\t\t},\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\tapple: &identityPoolAppleLoginProvider{\n\t\t\tservicesId: jsii.String(\"com.myappleapp.auth\"),\n\t\t},\n\t\ttwitter: &identityPoolTwitterLoginProvider{\n\t\t\tconsumerKey: jsii.String(\"my-twitter-id\"),\n\t\t\tconsumerSecret: jsii.String(\"my-twitter-secret\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "193": 7,
        "197": 1,
        "226": 1,
        "281": 13
      },
      "fqnsFingerprint": "74be512aa214d879c893018b788f1c207e1acd775bb40df721f34e8c46fc05e0"
    },
    "652912ddf4db70f15cd3514e9994c7b29cd8308405758fbd223f88bde5158535": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        amazon=IdentityPoolAmazonLoginProvider(\n            app_id=\"amzn1.application.12312k3j234j13rjiwuenf\"\n        ),\n        facebook=IdentityPoolFacebookLoginProvider(\n            app_id=\"1234567890123\"\n        ),\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        apple=IdentityPoolAppleLoginProvider(\n            services_id=\"com.myappleapp.auth\"\n        ),\n        twitter=IdentityPoolTwitterLoginProvider(\n            consumer_key=\"my-twitter-id\",\n            consumer_secret=\"my-twitter-secret\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Amazon = new IdentityPoolAmazonLoginProvider {\n            AppId = \"amzn1.application.12312k3j234j13rjiwuenf\"\n        },\n        Facebook = new IdentityPoolFacebookLoginProvider {\n            AppId = \"1234567890123\"\n        },\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        Apple = new IdentityPoolAppleLoginProvider {\n            ServicesId = \"com.myappleapp.auth\"\n        },\n        Twitter = new IdentityPoolTwitterLoginProvider {\n            ConsumerKey = \"my-twitter-id\",\n            ConsumerSecret = \"my-twitter-secret\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .amazon(IdentityPoolAmazonLoginProvider.builder()\n                        .appId(\"amzn1.application.12312k3j234j13rjiwuenf\")\n                        .build())\n                .facebook(IdentityPoolFacebookLoginProvider.builder()\n                        .appId(\"1234567890123\")\n                        .build())\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .apple(IdentityPoolAppleLoginProvider.builder()\n                        .servicesId(\"com.myappleapp.auth\")\n                        .build())\n                .twitter(IdentityPoolTwitterLoginProvider.builder()\n                        .consumerKey(\"my-twitter-id\")\n                        .consumerSecret(\"my-twitter-secret\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tamazon: &identityPoolAmazonLoginProvider{\n\t\t\tappId: jsii.String(\"amzn1.application.12312k3j234j13rjiwuenf\"),\n\t\t},\n\t\tfacebook: &identityPoolFacebookLoginProvider{\n\t\t\tappId: jsii.String(\"1234567890123\"),\n\t\t},\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\tapple: &identityPoolAppleLoginProvider{\n\t\t\tservicesId: jsii.String(\"com.myappleapp.auth\"),\n\t\t},\n\t\ttwitter: &identityPoolTwitterLoginProvider{\n\t\t\tconsumerKey: jsii.String(\"my-twitter-id\"),\n\t\t\tconsumerSecret: jsii.String(\"my-twitter-secret\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "193": 7,
        "197": 1,
        "226": 1,
        "281": 13
      },
      "fqnsFingerprint": "74be512aa214d879c893018b788f1c207e1acd775bb40df721f34e8c46fc05e0"
    },
    "5c3b18569c3edef3ec3cf92326d4490a6c3c68e71c97107bae059e3039f53f4d": {
      "translations": {
        "python": {
          "source": "# open_id_connect_provider: iam.OpenIdConnectProvider\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        open_id_connect_providers=[open_id_connect_provider],\n        custom_provider=\"my-custom-provider.example.com\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        OpenIdConnectProviders = new [] { openIdConnectProvider },\n        CustomProvider = \"my-custom-provider.example.com\"\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "OpenIdConnectProvider openIdConnectProvider;\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .openIdConnectProviders(List.of(openIdConnectProvider))\n                .customProvider(\"my-custom-provider.example.com\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "var openIdConnectProvider openIdConnectProvider\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\topenIdConnectProviders: []iOpenIdConnectProvider{\n\t\t\topenIdConnectProvider,\n\t\t},\n\t\tcustomProvider: jsii.String(\"my-custom-provider.example.com\"),\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "declare const openIdConnectProvider: iam.OpenIdConnectProvider;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const openIdConnectProvider: iam.OpenIdConnectProvider;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    openIdConnectProviders: [openIdConnectProvider],\n    customProvider: 'my-custom-provider.example.com',\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 4,
        "75": 11,
        "104": 1,
        "130": 1,
        "153": 1,
        "169": 1,
        "192": 1,
        "193": 3,
        "197": 1,
        "225": 1,
        "226": 1,
        "242": 1,
        "243": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "e8a83120c3eaee4a303972bfac403d1bebb0cdd8150efa9ba3eea833b1d4c6b5"
    },
    "6dcab3bb8530cfdde67c62232f7dfb39e9a00bf8a00cb80f615e7ae07015f4c0": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolProviderUrl\n\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    role_mappings=[IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.user_pool(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\"),\n        use_token=True\n    ), IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.custom(\"my-custom-provider.com\"),\n        use_token=True\n    )\n    ]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.UserPool(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\"),\n        UseToken = true\n    }, new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.Custom(\"my-custom-provider.com\"),\n        UseToken = true\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolProviderUrl;\n\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.userPool(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\"))\n                .useToken(true)\n                .build(), IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.custom(\"my-custom-provider.com\"))\n                .useToken(true)\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl.userPool(jsii.String(\"cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id\")),\n\t\t\tuseToken: jsii.Boolean(true),\n\t\t},\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl.custom(jsii.String(\"my-custom-provider.com\")),\n\t\t\tuseToken: jsii.Boolean(true),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [\n    {\n      providerUrl: IdentityPoolProviderUrl.userPool('cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id'),\n      useToken: true,\n    },\n    {\n      providerUrl: IdentityPoolProviderUrl.custom('my-custom-provider.com'),\n      useToken: true,\n    },\n  ],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#custom",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#userPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolProviderUrl } from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  roleMappings: [\n    {\n      providerUrl: IdentityPoolProviderUrl.userPool('cognito-idp.my-idp-region.amazonaws.com/my-idp-region_abcdefghi:app_client_id'),\n      useToken: true,\n    },\n    {\n      providerUrl: IdentityPoolProviderUrl.custom('my-custom-provider.com'),\n      useToken: true,\n    },\n  ],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 5,
        "75": 12,
        "104": 1,
        "106": 2,
        "192": 1,
        "193": 3,
        "194": 2,
        "196": 2,
        "197": 1,
        "226": 1,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "281": 6,
        "290": 1
      },
      "fqnsFingerprint": "10c7c27c698516220f3446bb55ab988b819f651852a5a0961b2a54eb921f6242"
    },
    "faa061b4c006c8984f237675b7f84b61222a3da5eb252cfaba6cd0079c5dd7aa": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\n\nidentity_pool_providers = cognito_identitypool.IdentityPoolProviders(\n    amazon=cognito_identitypool.IdentityPoolAmazonLoginProvider(\n        app_id=\"appId\"\n    ),\n    apple=cognito_identitypool.IdentityPoolAppleLoginProvider(\n        services_id=\"servicesId\"\n    ),\n    digits=cognito_identitypool.IdentityPoolDigitsLoginProvider(\n        consumer_key=\"consumerKey\",\n        consumer_secret=\"consumerSecret\"\n    ),\n    facebook=cognito_identitypool.IdentityPoolFacebookLoginProvider(\n        app_id=\"appId\"\n    ),\n    google=cognito_identitypool.IdentityPoolGoogleLoginProvider(\n        client_id=\"clientId\"\n    ),\n    twitter=cognito_identitypool.IdentityPoolTwitterLoginProvider(\n        consumer_key=\"consumerKey\",\n        consumer_secret=\"consumerSecret\"\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\n\nIdentityPoolProviders identityPoolProviders = new IdentityPoolProviders {\n    Amazon = new IdentityPoolAmazonLoginProvider {\n        AppId = \"appId\"\n    },\n    Apple = new IdentityPoolAppleLoginProvider {\n        ServicesId = \"servicesId\"\n    },\n    Digits = new IdentityPoolDigitsLoginProvider {\n        ConsumerKey = \"consumerKey\",\n        ConsumerSecret = \"consumerSecret\"\n    },\n    Facebook = new IdentityPoolFacebookLoginProvider {\n        AppId = \"appId\"\n    },\n    Google = new IdentityPoolGoogleLoginProvider {\n        ClientId = \"clientId\"\n    },\n    Twitter = new IdentityPoolTwitterLoginProvider {\n        ConsumerKey = \"consumerKey\",\n        ConsumerSecret = \"consumerSecret\"\n    }\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\n\nIdentityPoolProviders identityPoolProviders = IdentityPoolProviders.builder()\n        .amazon(IdentityPoolAmazonLoginProvider.builder()\n                .appId(\"appId\")\n                .build())\n        .apple(IdentityPoolAppleLoginProvider.builder()\n                .servicesId(\"servicesId\")\n                .build())\n        .digits(IdentityPoolDigitsLoginProvider.builder()\n                .consumerKey(\"consumerKey\")\n                .consumerSecret(\"consumerSecret\")\n                .build())\n        .facebook(IdentityPoolFacebookLoginProvider.builder()\n                .appId(\"appId\")\n                .build())\n        .google(IdentityPoolGoogleLoginProvider.builder()\n                .clientId(\"clientId\")\n                .build())\n        .twitter(IdentityPoolTwitterLoginProvider.builder()\n                .consumerKey(\"consumerKey\")\n                .consumerSecret(\"consumerSecret\")\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nidentityPoolProviders := &identityPoolProviders{\n\tamazon: &identityPoolAmazonLoginProvider{\n\t\tappId: jsii.String(\"appId\"),\n\t},\n\tapple: &identityPoolAppleLoginProvider{\n\t\tservicesId: jsii.String(\"servicesId\"),\n\t},\n\tdigits: &identityPoolDigitsLoginProvider{\n\t\tconsumerKey: jsii.String(\"consumerKey\"),\n\t\tconsumerSecret: jsii.String(\"consumerSecret\"),\n\t},\n\tfacebook: &identityPoolFacebookLoginProvider{\n\t\tappId: jsii.String(\"appId\"),\n\t},\n\tgoogle: &identityPoolGoogleLoginProvider{\n\t\tclientId: jsii.String(\"clientId\"),\n\t},\n\ttwitter: &identityPoolTwitterLoginProvider{\n\t\tconsumerKey: jsii.String(\"consumerKey\"),\n\t\tconsumerSecret: jsii.String(\"consumerSecret\"),\n\t},\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst identityPoolProviders: cognito_identitypool.IdentityPoolProviders = {\n  amazon: {\n    appId: 'appId',\n  },\n  apple: {\n    servicesId: 'servicesId',\n  },\n  digits: {\n    consumerKey: 'consumerKey',\n    consumerSecret: 'consumerSecret',\n  },\n  facebook: {\n    appId: 'appId',\n  },\n  google: {\n    clientId: 'clientId',\n  },\n  twitter: {\n    consumerKey: 'consumerKey',\n    consumerSecret: 'consumerSecret',\n  },\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviders"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolDigitsLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst identityPoolProviders: cognito_identitypool.IdentityPoolProviders = {\n  amazon: {\n    appId: 'appId',\n  },\n  apple: {\n    servicesId: 'servicesId',\n  },\n  digits: {\n    consumerKey: 'consumerKey',\n    consumerSecret: 'consumerSecret',\n  },\n  facebook: {\n    appId: 'appId',\n  },\n  google: {\n    clientId: 'clientId',\n  },\n  twitter: {\n    consumerKey: 'consumerKey',\n    consumerSecret: 'consumerSecret',\n  },\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 9,
        "75": 18,
        "153": 1,
        "169": 1,
        "193": 7,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 14,
        "290": 1
      },
      "fqnsFingerprint": "04a442a4c86ea25e19b44fb1c6e8c131c684d92bc5abaa276ba92820d035be04"
    },
    "9aa005794660c7587705a798aef79184eb4104386ad05fdfa10bb49525c4accd": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\nimport aws_cdk.aws_iam as iam\n\n# identity_pool: cognito_identitypool.IdentityPool\n# identity_pool_provider_url: cognito_identitypool.IdentityPoolProviderUrl\n# role: iam.Role\n\nidentity_pool_role_attachment = cognito_identitypool.IdentityPoolRoleAttachment(self, \"MyIdentityPoolRoleAttachment\",\n    identity_pool=identity_pool,\n\n    # the properties below are optional\n    authenticated_role=role,\n    role_mappings=[cognito_identitypool.IdentityPoolRoleMapping(\n        provider_url=identity_pool_provider_url,\n\n        # the properties below are optional\n        resolve_ambiguous_roles=False,\n        rules=[cognito_identitypool.RoleMappingRule(\n            claim=\"claim\",\n            claim_value=\"claimValue\",\n            mapped_role=role,\n\n            # the properties below are optional\n            match_type=cognito_identitypool.RoleMappingMatchType.EQUALS\n        )],\n        use_token=False\n    )],\n    unauthenticated_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\nusing Amazon.CDK.AWS.IAM;\n\nIdentityPool identityPool;\nIdentityPoolProviderUrl identityPoolProviderUrl;\nRole role;\n\nIdentityPoolRoleAttachment identityPoolRoleAttachment = new IdentityPoolRoleAttachment(this, \"MyIdentityPoolRoleAttachment\", new IdentityPoolRoleAttachmentProps {\n    IdentityPool = identityPool,\n\n    // the properties below are optional\n    AuthenticatedRole = role,\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = identityPoolProviderUrl,\n\n        // the properties below are optional\n        ResolveAmbiguousRoles = false,\n        Rules = new [] { new RoleMappingRule {\n            Claim = \"claim\",\n            ClaimValue = \"claimValue\",\n            MappedRole = role,\n\n            // the properties below are optional\n            MatchType = RoleMappingMatchType.EQUALS\n        } },\n        UseToken = false\n    } },\n    UnauthenticatedRole = role\n});",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\nimport software.amazon.awscdk.services.iam.*;\n\nIdentityPool identityPool;\nIdentityPoolProviderUrl identityPoolProviderUrl;\nRole role;\n\nIdentityPoolRoleAttachment identityPoolRoleAttachment = IdentityPoolRoleAttachment.Builder.create(this, \"MyIdentityPoolRoleAttachment\")\n        .identityPool(identityPool)\n\n        // the properties below are optional\n        .authenticatedRole(role)\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(identityPoolProviderUrl)\n\n                // the properties below are optional\n                .resolveAmbiguousRoles(false)\n                .rules(List.of(RoleMappingRule.builder()\n                        .claim(\"claim\")\n                        .claimValue(\"claimValue\")\n                        .mappedRole(role)\n\n                        // the properties below are optional\n                        .matchType(RoleMappingMatchType.EQUALS)\n                        .build()))\n                .useToken(false)\n                .build()))\n        .unauthenticatedRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar identityPool identityPool\nvar identityPoolProviderUrl identityPoolProviderUrl\nvar role role\n\nidentityPoolRoleAttachment := cognito_identitypool.NewIdentityPoolRoleAttachment(this, jsii.String(\"MyIdentityPoolRoleAttachment\"), &identityPoolRoleAttachmentProps{\n\tidentityPool: identityPool,\n\n\t// the properties below are optional\n\tauthenticatedRole: role,\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: identityPoolProviderUrl,\n\n\t\t\t// the properties below are optional\n\t\t\tresolveAmbiguousRoles: jsii.Boolean(false),\n\t\t\trules: []roleMappingRule{\n\t\t\t\t&roleMappingRule{\n\t\t\t\t\tclaim: jsii.String(\"claim\"),\n\t\t\t\t\tclaimValue: jsii.String(\"claimValue\"),\n\t\t\t\t\tmappedRole: role,\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tmatchType: cognito_identitypool.roleMappingMatchType_EQUALS,\n\t\t\t\t},\n\t\t\t},\n\t\t\tuseToken: jsii.Boolean(false),\n\t\t},\n\t},\n\tunauthenticatedRole: role,\n})",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const identityPool: cognito_identitypool.IdentityPool;\ndeclare const identityPoolProviderUrl: cognito_identitypool.IdentityPoolProviderUrl;\ndeclare const role: iam.Role;\nconst identityPoolRoleAttachment = new cognito_identitypool.IdentityPoolRoleAttachment(this, 'MyIdentityPoolRoleAttachment', {\n  identityPool: identityPool,\n\n  // the properties below are optional\n  authenticatedRole: role,\n  roleMappings: [{\n    providerUrl: identityPoolProviderUrl,\n\n    // the properties below are optional\n    resolveAmbiguousRoles: false,\n    rules: [{\n      claim: 'claim',\n      claimValue: 'claimValue',\n      mappedRole: role,\n\n      // the properties below are optional\n      matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n    }],\n    useToken: false,\n  }],\n  unauthenticatedRole: role,\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachment"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IIdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachment",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachmentProps",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType#EQUALS",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const identityPool: cognito_identitypool.IdentityPool;\ndeclare const identityPoolProviderUrl: cognito_identitypool.IdentityPoolProviderUrl;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst identityPoolRoleAttachment = new cognito_identitypool.IdentityPoolRoleAttachment(this, 'MyIdentityPoolRoleAttachment', {\n  identityPool: identityPool,\n\n  // the properties below are optional\n  authenticatedRole: role,\n  roleMappings: [{\n    providerUrl: identityPoolProviderUrl,\n\n    // the properties below are optional\n    resolveAmbiguousRoles: false,\n    rules: [{\n      claim: 'claim',\n      claimValue: 'claimValue',\n      mappedRole: role,\n\n      // the properties below are optional\n      matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n    }],\n    useToken: false,\n  }],\n  unauthenticatedRole: role,\n});\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 5,
        "75": 34,
        "91": 2,
        "104": 1,
        "130": 3,
        "153": 3,
        "169": 3,
        "192": 2,
        "193": 3,
        "194": 3,
        "197": 1,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "9a76764ad8ed7a6b5bc74be5dee7cc8406b80cdfe771f6f9cd69d6cf063ef019"
    },
    "66001ca0604d7772743851df847bb6f51be26c79b823b43f09c951abba4378f9": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\nimport aws_cdk.aws_iam as iam\n\n# identity_pool: cognito_identitypool.IdentityPool\n# identity_pool_provider_url: cognito_identitypool.IdentityPoolProviderUrl\n# role: iam.Role\n\nidentity_pool_role_attachment_props = cognito_identitypool.IdentityPoolRoleAttachmentProps(\n    identity_pool=identity_pool,\n\n    # the properties below are optional\n    authenticated_role=role,\n    role_mappings=[cognito_identitypool.IdentityPoolRoleMapping(\n        provider_url=identity_pool_provider_url,\n\n        # the properties below are optional\n        resolve_ambiguous_roles=False,\n        rules=[cognito_identitypool.RoleMappingRule(\n            claim=\"claim\",\n            claim_value=\"claimValue\",\n            mapped_role=role,\n\n            # the properties below are optional\n            match_type=cognito_identitypool.RoleMappingMatchType.EQUALS\n        )],\n        use_token=False\n    )],\n    unauthenticated_role=role\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\nusing Amazon.CDK.AWS.IAM;\n\nIdentityPool identityPool;\nIdentityPoolProviderUrl identityPoolProviderUrl;\nRole role;\n\nIdentityPoolRoleAttachmentProps identityPoolRoleAttachmentProps = new IdentityPoolRoleAttachmentProps {\n    IdentityPool = identityPool,\n\n    // the properties below are optional\n    AuthenticatedRole = role,\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = identityPoolProviderUrl,\n\n        // the properties below are optional\n        ResolveAmbiguousRoles = false,\n        Rules = new [] { new RoleMappingRule {\n            Claim = \"claim\",\n            ClaimValue = \"claimValue\",\n            MappedRole = role,\n\n            // the properties below are optional\n            MatchType = RoleMappingMatchType.EQUALS\n        } },\n        UseToken = false\n    } },\n    UnauthenticatedRole = role\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\nimport software.amazon.awscdk.services.iam.*;\n\nIdentityPool identityPool;\nIdentityPoolProviderUrl identityPoolProviderUrl;\nRole role;\n\nIdentityPoolRoleAttachmentProps identityPoolRoleAttachmentProps = IdentityPoolRoleAttachmentProps.builder()\n        .identityPool(identityPool)\n\n        // the properties below are optional\n        .authenticatedRole(role)\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(identityPoolProviderUrl)\n\n                // the properties below are optional\n                .resolveAmbiguousRoles(false)\n                .rules(List.of(RoleMappingRule.builder()\n                        .claim(\"claim\")\n                        .claimValue(\"claimValue\")\n                        .mappedRole(role)\n\n                        // the properties below are optional\n                        .matchType(RoleMappingMatchType.EQUALS)\n                        .build()))\n                .useToken(false)\n                .build()))\n        .unauthenticatedRole(role)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar identityPool identityPool\nvar identityPoolProviderUrl identityPoolProviderUrl\nvar role role\n\nidentityPoolRoleAttachmentProps := &identityPoolRoleAttachmentProps{\n\tidentityPool: identityPool,\n\n\t// the properties below are optional\n\tauthenticatedRole: role,\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: identityPoolProviderUrl,\n\n\t\t\t// the properties below are optional\n\t\t\tresolveAmbiguousRoles: jsii.Boolean(false),\n\t\t\trules: []roleMappingRule{\n\t\t\t\t&roleMappingRule{\n\t\t\t\t\tclaim: jsii.String(\"claim\"),\n\t\t\t\t\tclaimValue: jsii.String(\"claimValue\"),\n\t\t\t\t\tmappedRole: role,\n\n\t\t\t\t\t// the properties below are optional\n\t\t\t\t\tmatchType: cognito_identitypool.roleMappingMatchType_EQUALS,\n\t\t\t\t},\n\t\t\t},\n\t\t\tuseToken: jsii.Boolean(false),\n\t\t},\n\t},\n\tunauthenticatedRole: role,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const identityPool: cognito_identitypool.IdentityPool;\ndeclare const identityPoolProviderUrl: cognito_identitypool.IdentityPoolProviderUrl;\ndeclare const role: iam.Role;\nconst identityPoolRoleAttachmentProps: cognito_identitypool.IdentityPoolRoleAttachmentProps = {\n  identityPool: identityPool,\n\n  // the properties below are optional\n  authenticatedRole: role,\n  roleMappings: [{\n    providerUrl: identityPoolProviderUrl,\n\n    // the properties below are optional\n    resolveAmbiguousRoles: false,\n    rules: [{\n      claim: 'claim',\n      claimValue: 'claimValue',\n      mappedRole: role,\n\n      // the properties below are optional\n      matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n    }],\n    useToken: false,\n  }],\n  unauthenticatedRole: role,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachmentProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IIdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleAttachmentProps",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType#EQUALS",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const identityPool: cognito_identitypool.IdentityPool;\ndeclare const identityPoolProviderUrl: cognito_identitypool.IdentityPoolProviderUrl;\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst identityPoolRoleAttachmentProps: cognito_identitypool.IdentityPoolRoleAttachmentProps = {\n  identityPool: identityPool,\n\n  // the properties below are optional\n  authenticatedRole: role,\n  roleMappings: [{\n    providerUrl: identityPoolProviderUrl,\n\n    // the properties below are optional\n    resolveAmbiguousRoles: false,\n    rules: [{\n      claim: 'claim',\n      claimValue: 'claimValue',\n      mappedRole: role,\n\n      // the properties below are optional\n      matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n    }],\n    useToken: false,\n  }],\n  unauthenticatedRole: role,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 34,
        "91": 2,
        "130": 3,
        "153": 4,
        "169": 4,
        "192": 2,
        "193": 3,
        "194": 2,
        "225": 4,
        "242": 4,
        "243": 4,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 12,
        "290": 1
      },
      "fqnsFingerprint": "91bf43b93895d59b3289b91157fe473e07d1f4bd1b7d6e9d1ddd0873085ca17e"
    },
    "55da8d1856f73b09fe589f722c19714a1ed80f7ce975e1b453bebf6da91e4270": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolRoleMapping\n\n# identity_pool: IdentityPool\n# my_added_role_mapping1: IdentityPoolRoleMapping\n# my_added_role_mapping2: IdentityPoolRoleMapping\n# my_added_role_mapping3: IdentityPoolRoleMapping\n\n\nidentity_pool.add_role_mappings(my_added_role_mapping1, my_added_role_mapping2, my_added_role_mapping3)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\nIdentityPool identityPool;\nIdentityPoolRoleMapping myAddedRoleMapping1;\nIdentityPoolRoleMapping myAddedRoleMapping2;\nIdentityPoolRoleMapping myAddedRoleMapping3;\n\n\nidentityPool.AddRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolRoleMapping;\n\nIdentityPool identityPool;\nIdentityPoolRoleMapping myAddedRoleMapping1;\nIdentityPoolRoleMapping myAddedRoleMapping2;\nIdentityPoolRoleMapping myAddedRoleMapping3;\n\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nvar identityPool identityPool\nvar myAddedRoleMapping1 identityPoolRoleMapping\nvar myAddedRoleMapping2 identityPoolRoleMapping\nvar myAddedRoleMapping3 identityPoolRoleMapping\n\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3)",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolRoleMapping } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const identityPool: IdentityPool;\ndeclare const myAddedRoleMapping1: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping2: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping3: IdentityPoolRoleMapping;\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#addRoleMappings",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolRoleMapping"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolRoleMapping } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const identityPool: IdentityPool;\ndeclare const myAddedRoleMapping1: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping2: IdentityPoolRoleMapping;\ndeclare const myAddedRoleMapping3: IdentityPoolRoleMapping;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\n\nidentityPool.addRoleMappings(myAddedRoleMapping1, myAddedRoleMapping2, myAddedRoleMapping3);\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 14,
        "130": 4,
        "169": 4,
        "194": 1,
        "196": 1,
        "225": 4,
        "226": 1,
        "242": 4,
        "243": 4,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 1,
        "290": 1
      },
      "fqnsFingerprint": "e7c0e102581257984b8d94392c524109d87381c1d0e4ab9fa46ad47750eda5fa"
    },
    "8c462b18e7d0d4a3d4ada2f5d31202ce15b725cce3d3cc3cd0985a00c5bd9309": {
      "translations": {
        "python": {
          "source": "IdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    authentication_providers=IdentityPoolAuthenticationProviders(\n        amazon=IdentityPoolAmazonLoginProvider(\n            app_id=\"amzn1.application.12312k3j234j13rjiwuenf\"\n        ),\n        facebook=IdentityPoolFacebookLoginProvider(\n            app_id=\"1234567890123\"\n        ),\n        google=IdentityPoolGoogleLoginProvider(\n            client_id=\"12345678012.apps.googleusercontent.com\"\n        ),\n        apple=IdentityPoolAppleLoginProvider(\n            services_id=\"com.myappleapp.auth\"\n        ),\n        twitter=IdentityPoolTwitterLoginProvider(\n            consumer_key=\"my-twitter-id\",\n            consumer_secret=\"my-twitter-secret\"\n        )\n    )\n)",
          "version": "2"
        },
        "csharp": {
          "source": "new IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    AuthenticationProviders = new IdentityPoolAuthenticationProviders {\n        Amazon = new IdentityPoolAmazonLoginProvider {\n            AppId = \"amzn1.application.12312k3j234j13rjiwuenf\"\n        },\n        Facebook = new IdentityPoolFacebookLoginProvider {\n            AppId = \"1234567890123\"\n        },\n        Google = new IdentityPoolGoogleLoginProvider {\n            ClientId = \"12345678012.apps.googleusercontent.com\"\n        },\n        Apple = new IdentityPoolAppleLoginProvider {\n            ServicesId = \"com.myappleapp.auth\"\n        },\n        Twitter = new IdentityPoolTwitterLoginProvider {\n            ConsumerKey = \"my-twitter-id\",\n            ConsumerSecret = \"my-twitter-secret\"\n        }\n    }\n});",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        .authenticationProviders(IdentityPoolAuthenticationProviders.builder()\n                .amazon(IdentityPoolAmazonLoginProvider.builder()\n                        .appId(\"amzn1.application.12312k3j234j13rjiwuenf\")\n                        .build())\n                .facebook(IdentityPoolFacebookLoginProvider.builder()\n                        .appId(\"1234567890123\")\n                        .build())\n                .google(IdentityPoolGoogleLoginProvider.builder()\n                        .clientId(\"12345678012.apps.googleusercontent.com\")\n                        .build())\n                .apple(IdentityPoolAppleLoginProvider.builder()\n                        .servicesId(\"com.myappleapp.auth\")\n                        .build())\n                .twitter(IdentityPoolTwitterLoginProvider.builder()\n                        .consumerKey(\"my-twitter-id\")\n                        .consumerSecret(\"my-twitter-secret\")\n                        .build())\n                .build())\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "awscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\tauthenticationProviders: &identityPoolAuthenticationProviders{\n\t\tamazon: &identityPoolAmazonLoginProvider{\n\t\t\tappId: jsii.String(\"amzn1.application.12312k3j234j13rjiwuenf\"),\n\t\t},\n\t\tfacebook: &identityPoolFacebookLoginProvider{\n\t\t\tappId: jsii.String(\"1234567890123\"),\n\t\t},\n\t\tgoogle: &identityPoolGoogleLoginProvider{\n\t\t\tclientId: jsii.String(\"12345678012.apps.googleusercontent.com\"),\n\t\t},\n\t\tapple: &identityPoolAppleLoginProvider{\n\t\t\tservicesId: jsii.String(\"com.myappleapp.auth\"),\n\t\t},\n\t\ttwitter: &identityPoolTwitterLoginProvider{\n\t\t\tconsumerKey: jsii.String(\"my-twitter-id\"),\n\t\t\tconsumerSecret: jsii.String(\"my-twitter-secret\"),\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "new IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAmazonLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAppleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolAuthenticationProviders",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolFacebookLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolGoogleLoginProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolTwitterLoginProvider",
        "constructs.Construct"
      ],
      "fullSource": "// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  authenticationProviders: {\n    amazon: {\n      appId: 'amzn1.application.12312k3j234j13rjiwuenf',\n    },\n    facebook: {\n      appId: '1234567890123',\n    },\n    google: {\n      clientId: '12345678012.apps.googleusercontent.com',\n    },\n    apple: {\n      servicesId: 'com.myappleapp.auth',\n    },\n    twitter: {\n      consumerKey: 'my-twitter-id',\n      consumerSecret: 'my-twitter-secret',\n    },\n  },\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 8,
        "75": 14,
        "104": 1,
        "193": 7,
        "197": 1,
        "226": 1,
        "281": 13
      },
      "fqnsFingerprint": "74be512aa214d879c893018b788f1c207e1acd775bb40df721f34e8c46fc05e0"
    },
    "8d14f3cf49870b738167415ea0e15bbfc63d794d413de58b05ee8e7c771c5063": {
      "translations": {
        "python": {
          "source": "from aws_cdk.aws_cognito_identitypool import IdentityPoolProviderUrl, RoleMappingMatchType\n\n# admin_role: iam.Role\n# non_admin_role: iam.Role\n\nIdentityPool(self, \"myidentitypool\",\n    identity_pool_name=\"myidentitypool\",\n    # Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n    role_mappings=[IdentityPoolRoleMapping(\n        provider_url=IdentityPoolProviderUrl.AMAZON,\n        rules=[RoleMappingRule(\n            claim=\"custom:admin\",\n            claim_value=\"admin\",\n            mapped_role=admin_role\n        ), RoleMappingRule(\n            claim=\"custom:admin\",\n            claim_value=\"admin\",\n            match_type=RoleMappingMatchType.NOTEQUAL,\n            mapped_role=non_admin_role\n        )\n        ]\n    )]\n)",
          "version": "2"
        },
        "csharp": {
          "source": "using Amazon.CDK.AWS.Cognito.IdentityPool;\n\nRole adminRole;\nRole nonAdminRole;\n\nnew IdentityPool(this, \"myidentitypool\", new IdentityPoolProps {\n    IdentityPoolName = \"myidentitypool\",\n    // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n    RoleMappings = new [] { new IdentityPoolRoleMapping {\n        ProviderUrl = IdentityPoolProviderUrl.AMAZON,\n        Rules = new [] { new RoleMappingRule {\n            Claim = \"custom:admin\",\n            ClaimValue = \"admin\",\n            MappedRole = adminRole\n        }, new RoleMappingRule {\n            Claim = \"custom:admin\",\n            ClaimValue = \"admin\",\n            MatchType = RoleMappingMatchType.NOTEQUAL,\n            MappedRole = nonAdminRole\n        } }\n    } }\n});",
          "version": "1"
        },
        "java": {
          "source": "import software.amazon.awscdk.services.cognito.identitypool.IdentityPoolProviderUrl;\nimport software.amazon.awscdk.services.cognito.identitypool.RoleMappingMatchType;\n\nRole adminRole;\nRole nonAdminRole;\n\nIdentityPool.Builder.create(this, \"myidentitypool\")\n        .identityPoolName(\"myidentitypool\")\n        // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n        .roleMappings(List.of(IdentityPoolRoleMapping.builder()\n                .providerUrl(IdentityPoolProviderUrl.AMAZON)\n                .rules(List.of(RoleMappingRule.builder()\n                        .claim(\"custom:admin\")\n                        .claimValue(\"admin\")\n                        .mappedRole(adminRole)\n                        .build(), RoleMappingRule.builder()\n                        .claim(\"custom:admin\")\n                        .claimValue(\"admin\")\n                        .matchType(RoleMappingMatchType.NOTEQUAL)\n                        .mappedRole(nonAdminRole)\n                        .build()))\n                .build()))\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "import \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nvar adminRole role\nvar nonAdminRole role\n\nawscdkawscognitoidentitypool.NewIdentityPool(this, jsii.String(\"myidentitypool\"), &identityPoolProps{\n\tidentityPoolName: jsii.String(\"myidentitypool\"),\n\t// Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n\troleMappings: []identityPoolRoleMapping{\n\t\t&identityPoolRoleMapping{\n\t\t\tproviderUrl: *awscdkawscognitoidentitypool.IdentityPoolProviderUrl_AMAZON(),\n\t\t\trules: []roleMappingRule{\n\t\t\t\t&roleMappingRule{\n\t\t\t\t\tclaim: jsii.String(\"custom:admin\"),\n\t\t\t\t\tclaimValue: jsii.String(\"admin\"),\n\t\t\t\t\tmappedRole: adminRole,\n\t\t\t\t},\n\t\t\t\t&roleMappingRule{\n\t\t\t\t\tclaim: jsii.String(\"custom:admin\"),\n\t\t\t\t\tclaimValue: jsii.String(\"admin\"),\n\t\t\t\t\tmatchType: *awscdkawscognitoidentitypool.RoleMappingMatchType_NOTEQUAL,\n\t\t\t\t\tmappedRole: nonAdminRole,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})",
          "version": "1"
        },
        "$": {
          "source": "import { IdentityPoolProviderUrl, RoleMappingMatchType } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const adminRole: iam.Role;\ndeclare const nonAdminRole: iam.Role;\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    rules: [\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        mappedRole: adminRole,\n      },\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        matchType: RoleMappingMatchType.NOTEQUAL,\n        mappedRole: nonAdminRole,\n      }\n    ],\n  }],\n});",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IdentityPool",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProps",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl",
        "@aws-cdk/aws-cognito-identitypool.IdentityPoolProviderUrl#AMAZON",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType#NOTEQUAL",
        "@aws-cdk/aws-iam.IRole",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\nimport { IdentityPoolProviderUrl, RoleMappingMatchType } from '@aws-cdk/aws-cognito-identitypool';\n\ndeclare const adminRole: iam.Role;\ndeclare const nonAdminRole: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nnew IdentityPool(this, 'myidentitypool', {\n  identityPoolName: 'myidentitypool',\n  // Assign specific roles to users based on whether or not the custom admin claim is passed from the identity provider\n  roleMappings: [{\n    providerUrl: IdentityPoolProviderUrl.AMAZON,\n    rules: [\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        mappedRole: adminRole,\n      },\n      {\n        claim: 'custom:admin',\n        claimValue: 'admin',\n        matchType: RoleMappingMatchType.NOTEQUAL,\n        mappedRole: nonAdminRole,\n      }\n    ],\n  }],\n});\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 7,
        "75": 26,
        "104": 1,
        "130": 2,
        "153": 2,
        "169": 2,
        "192": 2,
        "193": 4,
        "194": 2,
        "197": 1,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "254": 1,
        "255": 1,
        "257": 1,
        "258": 2,
        "281": 11,
        "290": 1
      },
      "fqnsFingerprint": "49c1a808d0fa11d4f3cde0180061732e317afa86873b1e359ee6da76943a4628"
    },
    "b7bd65b607f5d6e31bf3c759b99636da735318fafe250f8dcea760f3192e9869": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\nimport aws_cdk.aws_iam as iam\n\n# role: iam.Role\n\nrole_mapping_rule = cognito_identitypool.RoleMappingRule(\n    claim=\"claim\",\n    claim_value=\"claimValue\",\n    mapped_role=role,\n\n    # the properties below are optional\n    match_type=cognito_identitypool.RoleMappingMatchType.EQUALS\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\nusing Amazon.CDK.AWS.IAM;\n\nRole role;\n\nRoleMappingRule roleMappingRule = new RoleMappingRule {\n    Claim = \"claim\",\n    ClaimValue = \"claimValue\",\n    MappedRole = role,\n\n    // the properties below are optional\n    MatchType = RoleMappingMatchType.EQUALS\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\nimport software.amazon.awscdk.services.iam.*;\n\nRole role;\n\nRoleMappingRule roleMappingRule = RoleMappingRule.builder()\n        .claim(\"claim\")\n        .claimValue(\"claimValue\")\n        .mappedRole(role)\n\n        // the properties below are optional\n        .matchType(RoleMappingMatchType.EQUALS)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\nimport iam \"github.com/aws-samples/dummy/awscdkawsiam\"\n\nvar role role\n\nroleMappingRule := &roleMappingRule{\n\tclaim: jsii.String(\"claim\"),\n\tclaimValue: jsii.String(\"claimValue\"),\n\tmappedRole: role,\n\n\t// the properties below are optional\n\tmatchType: cognito_identitypool.roleMappingMatchType_EQUALS,\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\nconst roleMappingRule: cognito_identitypool.RoleMappingRule = {\n  claim: 'claim',\n  claimValue: 'claimValue',\n  mappedRole: role,\n\n  // the properties below are optional\n  matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.RoleMappingRule"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingMatchType#EQUALS",
        "@aws-cdk/aws-cognito-identitypool.RoleMappingRule",
        "@aws-cdk/aws-iam.IRole"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nimport * as iam from '@aws-cdk/aws-iam';\n\ndeclare const role: iam.Role;\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst roleMappingRule: cognito_identitypool.RoleMappingRule = {\n  claim: 'claim',\n  claimValue: 'claimValue',\n  mappedRole: role,\n\n  // the properties below are optional\n  matchType: cognito_identitypool.RoleMappingMatchType.EQUALS,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 4,
        "75": 16,
        "130": 1,
        "153": 2,
        "169": 2,
        "193": 1,
        "194": 2,
        "225": 2,
        "242": 2,
        "243": 2,
        "254": 2,
        "255": 2,
        "256": 2,
        "281": 4,
        "290": 1
      },
      "fqnsFingerprint": "8362a71bbd33c00d40faa44688894a883000f77d84206da5e1c9664fa806144f"
    },
    "2c10f857462f6f943a9bd4b6258d0e91e5b29a835eb2fd6fb16431996f0881b2": {
      "translations": {
        "python": {
          "source": "# identity_pool: IdentityPool\n\nuser_pool = cognito.UserPool(self, \"Pool\")\nidentity_pool.add_user_pool_authentication(UserPoolAuthenticationProvider(\n    user_pool=user_pool,\n    disable_server_side_token_check=True\n))",
          "version": "2"
        },
        "csharp": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nidentityPool.AddUserPoolAuthentication(new UserPoolAuthenticationProvider(new UserPoolAuthenticationProviderProps {\n    UserPool = userPool,\n    DisableServerSideTokenCheck = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nidentityPool.addUserPoolAuthentication(UserPoolAuthenticationProvider.Builder.create()\n        .userPool(userPool)\n        .disableServerSideTokenCheck(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var identityPool identityPool\n\nuserPool := cognito.NewUserPool(this, jsii.String(\"Pool\"))\nidentityPool.addUserPoolAuthentication(awscdkawscognitoidentitypool.NewUserPoolAuthenticationProvider(&userPoolAuthenticationProviderProps{\n\tuserPool: userPool,\n\tdisableServerSideTokenCheck: jsii.Boolean(true),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#addUserPoolAuthentication",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const identityPool: IdentityPool;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "106": 1,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c7a61aa95cabbcce97470ddea14c62d4dfcd79996e7a5db90b8e3b0855a76e0"
    },
    "4f4fd140f12cb7d9b6b90130de4543a02978364e2227c4ad6b4393ae12782b51": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\n\nuser_pool_authentication_provider_bind_config = cognito_identitypool.UserPoolAuthenticationProviderBindConfig(\n    client_id=\"clientId\",\n    provider_name=\"providerName\",\n    server_side_token_check=False\n)",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\n\nUserPoolAuthenticationProviderBindConfig userPoolAuthenticationProviderBindConfig = new UserPoolAuthenticationProviderBindConfig {\n    ClientId = \"clientId\",\n    ProviderName = \"providerName\",\n    ServerSideTokenCheck = false\n};",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\n\nUserPoolAuthenticationProviderBindConfig userPoolAuthenticationProviderBindConfig = UserPoolAuthenticationProviderBindConfig.builder()\n        .clientId(\"clientId\")\n        .providerName(\"providerName\")\n        .serverSideTokenCheck(false)\n        .build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nuserPoolAuthenticationProviderBindConfig := &userPoolAuthenticationProviderBindConfig{\n\tclientId: jsii.String(\"clientId\"),\n\tproviderName: jsii.String(\"providerName\"),\n\tserverSideTokenCheck: jsii.Boolean(false),\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst userPoolAuthenticationProviderBindConfig: cognito_identitypool.UserPoolAuthenticationProviderBindConfig = {\n  clientId: 'clientId',\n  providerName: 'providerName',\n  serverSideTokenCheck: false,\n};",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindConfig"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindConfig"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst userPoolAuthenticationProviderBindConfig: cognito_identitypool.UserPoolAuthenticationProviderBindConfig = {\n  clientId: 'clientId',\n  providerName: 'providerName',\n  serverSideTokenCheck: false,\n};\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 3,
        "75": 7,
        "91": 1,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "281": 3,
        "290": 1
      },
      "fqnsFingerprint": "c6bdfe2019b7f740d34f7005b72eea06d1e80e3e973b419ad2afc39a345c5715"
    },
    "86cad27156cc40b338a8b0e7539b30d38de9a52f1b6a9ba173b1394bffd2ce53": {
      "translations": {
        "python": {
          "source": "# The code below shows an example of how to instantiate this type.\n# The values are placeholders you should change.\nimport aws_cdk.aws_cognito_identitypool as cognito_identitypool\n\nuser_pool_authentication_provider_bind_options = cognito_identitypool.UserPoolAuthenticationProviderBindOptions()",
          "version": "2"
        },
        "csharp": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nusing Amazon.CDK.AWS.Cognito.IdentityPool;\n\nUserPoolAuthenticationProviderBindOptions userPoolAuthenticationProviderBindOptions = new UserPoolAuthenticationProviderBindOptions { };",
          "version": "1"
        },
        "java": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport software.amazon.awscdk.services.cognito.identitypool.*;\n\nUserPoolAuthenticationProviderBindOptions userPoolAuthenticationProviderBindOptions = UserPoolAuthenticationProviderBindOptions.builder().build();",
          "version": "1"
        },
        "go": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport cognito_identitypool \"github.com/aws-samples/dummy/awscdkawscognitoidentitypool\"\n\nuserPoolAuthenticationProviderBindOptions := &userPoolAuthenticationProviderBindOptions{\n}",
          "version": "1"
        },
        "$": {
          "source": "// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\nconst userPoolAuthenticationProviderBindOptions: cognito_identitypool.UserPoolAuthenticationProviderBindOptions = { };",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindOptions"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderBindOptions"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\n// The code below shows an example of how to instantiate this type.\n// The values are placeholders you should change.\nimport * as cognito_identitypool from '@aws-cdk/aws-cognito-identitypool';\n/// !hide\n// Hoisted imports ended before !hide marker above\nimport { Construct } from \"@aws-cdk/core\";\nclass MyConstruct extends Construct {\nconstructor(scope: Construct, id: string) {\nsuper(scope, id);\n// Code snippet begins after !show marker below\n/// !show\n\nconst userPoolAuthenticationProviderBindOptions: cognito_identitypool.UserPoolAuthenticationProviderBindOptions = { };\n/// !hide\n// Code snippet ended before !hide marker above\n} }",
      "syntaxKindCounter": {
        "10": 1,
        "75": 4,
        "153": 1,
        "169": 1,
        "193": 1,
        "225": 1,
        "242": 1,
        "243": 1,
        "254": 1,
        "255": 1,
        "256": 1,
        "290": 1
      },
      "fqnsFingerprint": "80353287b3d702728b68283b7c4f1b8707fe3186983b2043fad2a34cbdbbcaea"
    },
    "53f5d733db279a35a1797ea52a4a62b6663ba9b76303565231396faad20e051b": {
      "translations": {
        "python": {
          "source": "# identity_pool: IdentityPool\n\nuser_pool = cognito.UserPool(self, \"Pool\")\nidentity_pool.add_user_pool_authentication(UserPoolAuthenticationProvider(\n    user_pool=user_pool,\n    disable_server_side_token_check=True\n))",
          "version": "2"
        },
        "csharp": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nidentityPool.AddUserPoolAuthentication(new UserPoolAuthenticationProvider(new UserPoolAuthenticationProviderProps {\n    UserPool = userPool,\n    DisableServerSideTokenCheck = true\n}));",
          "version": "1"
        },
        "java": {
          "source": "IdentityPool identityPool;\n\nUserPool userPool = new UserPool(this, \"Pool\");\nidentityPool.addUserPoolAuthentication(UserPoolAuthenticationProvider.Builder.create()\n        .userPool(userPool)\n        .disableServerSideTokenCheck(true)\n        .build());",
          "version": "1"
        },
        "go": {
          "source": "var identityPool identityPool\n\nuserPool := cognito.NewUserPool(this, jsii.String(\"Pool\"))\nidentityPool.addUserPoolAuthentication(awscdkawscognitoidentitypool.NewUserPoolAuthenticationProvider(&userPoolAuthenticationProviderProps{\n\tuserPool: userPool,\n\tdisableServerSideTokenCheck: jsii.Boolean(true),\n}))",
          "version": "1"
        },
        "$": {
          "source": "declare const identityPool: IdentityPool;\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));",
          "version": "0"
        }
      },
      "location": {
        "api": {
          "api": "type",
          "fqn": "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps"
        },
        "field": {
          "field": "example"
        }
      },
      "didCompile": true,
      "fqnsReferenced": [
        "@aws-cdk/aws-cognito-identitypool.IUserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.IdentityPool#addUserPoolAuthentication",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProvider",
        "@aws-cdk/aws-cognito-identitypool.UserPoolAuthenticationProviderProps",
        "@aws-cdk/aws-cognito.IUserPool",
        "@aws-cdk/aws-cognito.UserPool",
        "constructs.Construct"
      ],
      "fullSource": "// Hoisted imports begin after !show marker below\n/// !show\ndeclare const identityPool: IdentityPool;\n/// !hide\n// Hoisted imports ended before !hide marker above\n// Fixture with packages imported, but nothing else\nimport { Stack } from '@aws-cdk/core';\nimport { Construct } from 'constructs';\nimport * as cognito from '@aws-cdk/aws-cognito';\nimport * as iam from '@aws-cdk/aws-iam';\nimport { IdentityPool, UserPoolAuthenticationProvider } from '@aws-cdk/aws-cognito-identitypool';\n\nclass Fixture extends Stack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    // Code snippet begins after !show marker below\n/// !show\n\nconst userPool = new cognito.UserPool(this, 'Pool');\nidentityPool.addUserPoolAuthentication(new UserPoolAuthenticationProvider({\n  userPool,\n  disableServerSideTokenCheck: true,\n}));\n/// !hide\n// Code snippet ended before !hide marker above\n  }\n}",
      "syntaxKindCounter": {
        "10": 1,
        "75": 10,
        "104": 1,
        "106": 1,
        "130": 1,
        "169": 1,
        "193": 1,
        "194": 2,
        "196": 1,
        "197": 2,
        "225": 2,
        "226": 1,
        "242": 2,
        "243": 2,
        "281": 1,
        "282": 1,
        "290": 1
      },
      "fqnsFingerprint": "2c7a61aa95cabbcce97470ddea14c62d4dfcd79996e7a5db90b8e3b0855a76e0"
    }
  }
}